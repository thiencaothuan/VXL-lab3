
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fb8  08002fb8  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08002fb8  08002fb8  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fb8  08002fb8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08002fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000f0  080030b0  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080030b0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2b1  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf7  00000000  00000000  0002a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002cb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f9  00000000  00000000  0002d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0c4  00000000  00000000  00044801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822b3  00000000  00000000  000518c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000d3bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f7c 	.word	0x08002f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08002f7c 	.word	0x08002f7c

0800014c <isButtonPressed>:
int keyReg2[10] = {NORMAL_STATE};
int keyReg3[10] = {NORMAL_STATE};
int TimeOutForKeyPress =  200;
int button_flag[10];

int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
        button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
    }
    return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000164 	.word	0x20000164

08000180 <getKeyInput>:

void getKeyInput() {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    for (int i = 0; i < 10; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e081      	b.n	8000290 <getKeyInput+0x110>
        keyReg2[i] = keyReg1[i];
 800018c:	4a45      	ldr	r2, [pc, #276]	; (80002a4 <getKeyInput+0x124>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4944      	ldr	r1, [pc, #272]	; (80002a8 <getKeyInput+0x128>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        keyReg1[i] = keyReg0[i];
 800019c:	4a43      	ldr	r2, [pc, #268]	; (80002ac <getKeyInput+0x12c>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493f      	ldr	r1, [pc, #252]	; (80002a4 <getKeyInput+0x124>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (i == 0) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d10b      	bne.n	80001ca <getKeyInput+0x4a>
        	//đọc chân button1
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80001b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b6:	483e      	ldr	r0, [pc, #248]	; (80002b0 <getKeyInput+0x130>)
 80001b8:	f001 feb4 	bl	8001f24 <HAL_GPIO_ReadPin>
 80001bc:	4603      	mov	r3, r0
 80001be:	4619      	mov	r1, r3
 80001c0:	4a3a      	ldr	r2, [pc, #232]	; (80002ac <getKeyInput+0x12c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001c8:	e01c      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 1) {
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d10b      	bne.n	80001e8 <getKeyInput+0x68>
        	//đọc chân button2
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80001d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d4:	4836      	ldr	r0, [pc, #216]	; (80002b0 <getKeyInput+0x130>)
 80001d6:	f001 fea5 	bl	8001f24 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a33      	ldr	r2, [pc, #204]	; (80002ac <getKeyInput+0x12c>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e00d      	b.n	8000204 <getKeyInput+0x84>
        }
        else if (i == 2) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x84>
        	//đọc chân button3
        	keyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80001ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f2:	482f      	ldr	r0, [pc, #188]	; (80002b0 <getKeyInput+0x130>)
 80001f4:	f001 fe96 	bl	8001f24 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a2b      	ldr	r2, [pc, #172]	; (80002ac <getKeyInput+0x12c>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if ((keyReg2[i] == keyReg1[i]) && (keyReg1[i] == keyReg0[i])) {
 8000204:	4a28      	ldr	r2, [pc, #160]	; (80002a8 <getKeyInput+0x128>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4925      	ldr	r1, [pc, #148]	; (80002a4 <getKeyInput+0x124>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0x10a>
 8000218:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <getKeyInput+0x124>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4922      	ldr	r1, [pc, #136]	; (80002ac <getKeyInput+0x12c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d12e      	bne.n	800028a <getKeyInput+0x10a>
        	if (keyReg0[i] != keyReg3[i]) {
 800022c:	4a1f      	ldr	r2, [pc, #124]	; (80002ac <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x134>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d016      	beq.n	800026e <getKeyInput+0xee>
                keyReg3[i] = keyReg0[i];
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <getKeyInput+0x12c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	491a      	ldr	r1, [pc, #104]	; (80002b4 <getKeyInput+0x134>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (keyReg0[i] == PRESSED_STATE) {
 8000250:	4a16      	ldr	r2, [pc, #88]	; (80002ac <getKeyInput+0x12c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d116      	bne.n	800028a <getKeyInput+0x10a>
                	TimeOutForKeyPress = 200;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <getKeyInput+0x138>)
 800025e:	22c8      	movs	r2, #200	; 0xc8
 8000260:	601a      	str	r2, [r3, #0]
                    button_flag[i] = 1;
 8000262:	4a16      	ldr	r2, [pc, #88]	; (80002bc <getKeyInput+0x13c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026c:	e00d      	b.n	800028a <getKeyInput+0x10a>
                }
            }
        	else {
        		TimeOutForKeyPress--;
 800026e:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <getKeyInput+0x138>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3b01      	subs	r3, #1
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <getKeyInput+0x138>)
 8000276:	6013      	str	r3, [r2, #0]
        		if (TimeOutForKeyPress == 0) {
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <getKeyInput+0x138>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d104      	bne.n	800028a <getKeyInput+0x10a>
        			keyReg0[i] = NORMAL_STATE;
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <getKeyInput+0x12c>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2101      	movs	r1, #1
 8000286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < 10; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b09      	cmp	r3, #9
 8000294:	f77f af7a 	ble.w	800018c <getKeyInput+0xc>
        		}
        	}

        }
    }
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	20000050 	.word	0x20000050
 80002ac:	20000000 	.word	0x20000000
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000078 	.word	0x20000078
 80002b8:	200000a0 	.word	0x200000a0
 80002bc:	20000164 	.word	0x20000164

080002c0 <fsm_traffic_ver>:
int status_traffic_hor = INIT_HOR;
//mảng lưu trữ thời gian từng đèn mỗi chiều
int traffic_buffer_ver[3] = {0, 0, 0};
int traffic_buffer_hor[3] = {0, 0, 0};

void fsm_traffic_ver() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	switch (status_traffic_ver) {
 80002c4:	4b8a      	ldr	r3, [pc, #552]	; (80004f0 <fsm_traffic_ver+0x230>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b05      	subs	r3, #5
 80002ca:	2b03      	cmp	r3, #3
 80002cc:	f200 810d 	bhi.w	80004ea <fsm_traffic_ver+0x22a>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_traffic_ver+0x18>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	080002e9 	.word	0x080002e9
 80002dc:	08000317 	.word	0x08000317
 80002e0:	08000449 	.word	0x08000449
 80002e4:	080003b1 	.word	0x080003b1
		case INIT_VER:
			traffic_buffer_ver[0] = time_red_ver * 1000; //lưu time đèn đỏ sáng
 80002e8:	4b82      	ldr	r3, [pc, #520]	; (80004f4 <fsm_traffic_ver+0x234>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f0:	fb02 f303 	mul.w	r3, r2, r3
 80002f4:	4a80      	ldr	r2, [pc, #512]	; (80004f8 <fsm_traffic_ver+0x238>)
 80002f6:	6013      	str	r3, [r2, #0]
			setTimer(0, traffic_buffer_ver[0]);
 80002f8:	4b7f      	ldr	r3, [pc, #508]	; (80004f8 <fsm_traffic_ver+0x238>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4619      	mov	r1, r3
 80002fe:	2000      	movs	r0, #0
 8000300:	f001 f920 	bl	8001544 <setTimer>
			setTimer(5, 1000); //count down
 8000304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000308:	2005      	movs	r0, #5
 800030a:	f001 f91b 	bl	8001544 <setTimer>
			status_traffic_ver = RED_VER;
 800030e:	4b78      	ldr	r3, [pc, #480]	; (80004f0 <fsm_traffic_ver+0x230>)
 8000310:	2206      	movs	r2, #6
 8000312:	601a      	str	r2, [r3, #0]
			break;
 8000314:	e0e9      	b.n	80004ea <fsm_traffic_ver+0x22a>
		case RED_VER:
			red_led_ver();
 8000316:	f001 f9f3 	bl	8001700 <red_led_ver>
			led_buffer_ver[0] = time_red_ver_temp / 10;
 800031a:	4b78      	ldr	r3, [pc, #480]	; (80004fc <fsm_traffic_ver+0x23c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a78      	ldr	r2, [pc, #480]	; (8000500 <fsm_traffic_ver+0x240>)
 8000320:	fb82 1203 	smull	r1, r2, r2, r3
 8000324:	1092      	asrs	r2, r2, #2
 8000326:	17db      	asrs	r3, r3, #31
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	4a76      	ldr	r2, [pc, #472]	; (8000504 <fsm_traffic_ver+0x244>)
 800032c:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver_temp % 10;
 800032e:	4b73      	ldr	r3, [pc, #460]	; (80004fc <fsm_traffic_ver+0x23c>)
 8000330:	6819      	ldr	r1, [r3, #0]
 8000332:	4b73      	ldr	r3, [pc, #460]	; (8000500 <fsm_traffic_ver+0x240>)
 8000334:	fb83 2301 	smull	r2, r3, r3, r1
 8000338:	109a      	asrs	r2, r3, #2
 800033a:	17cb      	asrs	r3, r1, #31
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4613      	mov	r3, r2
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4413      	add	r3, r2
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	1aca      	subs	r2, r1, r3
 8000348:	4b6e      	ldr	r3, [pc, #440]	; (8000504 <fsm_traffic_ver+0x244>)
 800034a:	605a      	str	r2, [r3, #4]

			if (timer_flag[5] == 1) {
 800034c:	4b6e      	ldr	r3, [pc, #440]	; (8000508 <fsm_traffic_ver+0x248>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d111      	bne.n	8000378 <fsm_traffic_ver+0xb8>
				time_red_ver_temp--;
 8000354:	4b69      	ldr	r3, [pc, #420]	; (80004fc <fsm_traffic_ver+0x23c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a68      	ldr	r2, [pc, #416]	; (80004fc <fsm_traffic_ver+0x23c>)
 800035c:	6013      	str	r3, [r2, #0]
				if (time_red_ver_temp == 0) {
 800035e:	4b67      	ldr	r3, [pc, #412]	; (80004fc <fsm_traffic_ver+0x23c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d103      	bne.n	800036e <fsm_traffic_ver+0xae>
					time_red_ver_temp = time_red_ver;
 8000366:	4b63      	ldr	r3, [pc, #396]	; (80004f4 <fsm_traffic_ver+0x234>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a64      	ldr	r2, [pc, #400]	; (80004fc <fsm_traffic_ver+0x23c>)
 800036c:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 800036e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000372:	2005      	movs	r0, #5
 8000374:	f001 f8e6 	bl	8001544 <setTimer>
			}

			if (timer_flag[0] == 1) {
 8000378:	4b63      	ldr	r3, [pc, #396]	; (8000508 <fsm_traffic_ver+0x248>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	f040 80af 	bne.w	80004e0 <fsm_traffic_ver+0x220>
				traffic_buffer_ver[1] = time_green_ver * 1000; //lưu time cho đèn vàng sáng
 8000382:	4b62      	ldr	r3, [pc, #392]	; (800050c <fsm_traffic_ver+0x24c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800038a:	fb02 f303 	mul.w	r3, r2, r3
 800038e:	4a5a      	ldr	r2, [pc, #360]	; (80004f8 <fsm_traffic_ver+0x238>)
 8000390:	6053      	str	r3, [r2, #4]
				setTimer(0, traffic_buffer_ver[1]);
 8000392:	4b59      	ldr	r3, [pc, #356]	; (80004f8 <fsm_traffic_ver+0x238>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	4619      	mov	r1, r3
 8000398:	2000      	movs	r0, #0
 800039a:	f001 f8d3 	bl	8001544 <setTimer>
				setTimer(5, 1000);
 800039e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003a2:	2005      	movs	r0, #5
 80003a4:	f001 f8ce 	bl	8001544 <setTimer>
				status_traffic_ver = GREEN_VER;
 80003a8:	4b51      	ldr	r3, [pc, #324]	; (80004f0 <fsm_traffic_ver+0x230>)
 80003aa:	2208      	movs	r2, #8
 80003ac:	601a      	str	r2, [r3, #0]
			}
			break;
 80003ae:	e097      	b.n	80004e0 <fsm_traffic_ver+0x220>
		case GREEN_VER:
			green_led_ver();
 80003b0:	f001 f9d2 	bl	8001758 <green_led_ver>
			led_buffer_ver[0] = time_green_ver_temp / 10;
 80003b4:	4b56      	ldr	r3, [pc, #344]	; (8000510 <fsm_traffic_ver+0x250>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a51      	ldr	r2, [pc, #324]	; (8000500 <fsm_traffic_ver+0x240>)
 80003ba:	fb82 1203 	smull	r1, r2, r2, r3
 80003be:	1092      	asrs	r2, r2, #2
 80003c0:	17db      	asrs	r3, r3, #31
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	4a4f      	ldr	r2, [pc, #316]	; (8000504 <fsm_traffic_ver+0x244>)
 80003c6:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver_temp % 10;
 80003c8:	4b51      	ldr	r3, [pc, #324]	; (8000510 <fsm_traffic_ver+0x250>)
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	4b4c      	ldr	r3, [pc, #304]	; (8000500 <fsm_traffic_ver+0x240>)
 80003ce:	fb83 2301 	smull	r2, r3, r3, r1
 80003d2:	109a      	asrs	r2, r3, #2
 80003d4:	17cb      	asrs	r3, r1, #31
 80003d6:	1ad2      	subs	r2, r2, r3
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	1aca      	subs	r2, r1, r3
 80003e2:	4b48      	ldr	r3, [pc, #288]	; (8000504 <fsm_traffic_ver+0x244>)
 80003e4:	605a      	str	r2, [r3, #4]

			if (timer_flag[5] == 1) {
 80003e6:	4b48      	ldr	r3, [pc, #288]	; (8000508 <fsm_traffic_ver+0x248>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d111      	bne.n	8000412 <fsm_traffic_ver+0x152>
				time_green_ver_temp--;
 80003ee:	4b48      	ldr	r3, [pc, #288]	; (8000510 <fsm_traffic_ver+0x250>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	3b01      	subs	r3, #1
 80003f4:	4a46      	ldr	r2, [pc, #280]	; (8000510 <fsm_traffic_ver+0x250>)
 80003f6:	6013      	str	r3, [r2, #0]
				if (time_green_ver_temp == 0) {
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <fsm_traffic_ver+0x250>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d103      	bne.n	8000408 <fsm_traffic_ver+0x148>
					time_green_ver_temp = time_green_ver;
 8000400:	4b42      	ldr	r3, [pc, #264]	; (800050c <fsm_traffic_ver+0x24c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a42      	ldr	r2, [pc, #264]	; (8000510 <fsm_traffic_ver+0x250>)
 8000406:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 8000408:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800040c:	2005      	movs	r0, #5
 800040e:	f001 f899 	bl	8001544 <setTimer>
			}

			if (timer_flag[0] == 1) {
 8000412:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <fsm_traffic_ver+0x248>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d164      	bne.n	80004e4 <fsm_traffic_ver+0x224>
				traffic_buffer_ver[2] = time_yellow_ver * 1000; //lưu time cho đèn đỏ sáng
 800041a:	4b3e      	ldr	r3, [pc, #248]	; (8000514 <fsm_traffic_ver+0x254>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	4a34      	ldr	r2, [pc, #208]	; (80004f8 <fsm_traffic_ver+0x238>)
 8000428:	6093      	str	r3, [r2, #8]
				setTimer(0, traffic_buffer_ver[2]);
 800042a:	4b33      	ldr	r3, [pc, #204]	; (80004f8 <fsm_traffic_ver+0x238>)
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	4619      	mov	r1, r3
 8000430:	2000      	movs	r0, #0
 8000432:	f001 f887 	bl	8001544 <setTimer>
				setTimer(5, 1000);
 8000436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800043a:	2005      	movs	r0, #5
 800043c:	f001 f882 	bl	8001544 <setTimer>
				status_traffic_ver = YELLOW_VER;
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <fsm_traffic_ver+0x230>)
 8000442:	2207      	movs	r2, #7
 8000444:	601a      	str	r2, [r3, #0]
			}
			break;
 8000446:	e04d      	b.n	80004e4 <fsm_traffic_ver+0x224>
		case YELLOW_VER:
			yellow_led_ver();
 8000448:	f001 f970 	bl	800172c <yellow_led_ver>
			led_buffer_ver[0] = time_yellow_ver_temp / 10;
 800044c:	4b32      	ldr	r3, [pc, #200]	; (8000518 <fsm_traffic_ver+0x258>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a2b      	ldr	r2, [pc, #172]	; (8000500 <fsm_traffic_ver+0x240>)
 8000452:	fb82 1203 	smull	r1, r2, r2, r3
 8000456:	1092      	asrs	r2, r2, #2
 8000458:	17db      	asrs	r3, r3, #31
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4a29      	ldr	r2, [pc, #164]	; (8000504 <fsm_traffic_ver+0x244>)
 800045e:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver_temp % 10;
 8000460:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <fsm_traffic_ver+0x258>)
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	4b26      	ldr	r3, [pc, #152]	; (8000500 <fsm_traffic_ver+0x240>)
 8000466:	fb83 2301 	smull	r2, r3, r3, r1
 800046a:	109a      	asrs	r2, r3, #2
 800046c:	17cb      	asrs	r3, r1, #31
 800046e:	1ad2      	subs	r2, r2, r3
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	1aca      	subs	r2, r1, r3
 800047a:	4b22      	ldr	r3, [pc, #136]	; (8000504 <fsm_traffic_ver+0x244>)
 800047c:	605a      	str	r2, [r3, #4]

			if (timer_flag[5] == 1) {
 800047e:	4b22      	ldr	r3, [pc, #136]	; (8000508 <fsm_traffic_ver+0x248>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d111      	bne.n	80004aa <fsm_traffic_ver+0x1ea>
				time_yellow_ver_temp--;
 8000486:	4b24      	ldr	r3, [pc, #144]	; (8000518 <fsm_traffic_ver+0x258>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3b01      	subs	r3, #1
 800048c:	4a22      	ldr	r2, [pc, #136]	; (8000518 <fsm_traffic_ver+0x258>)
 800048e:	6013      	str	r3, [r2, #0]
				if (time_yellow_ver_temp == 0) {
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <fsm_traffic_ver+0x258>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d103      	bne.n	80004a0 <fsm_traffic_ver+0x1e0>
					time_yellow_ver_temp = time_yellow_ver;
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <fsm_traffic_ver+0x254>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <fsm_traffic_ver+0x258>)
 800049e:	6013      	str	r3, [r2, #0]
				}
				setTimer(5, 1000);
 80004a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a4:	2005      	movs	r0, #5
 80004a6:	f001 f84d 	bl	8001544 <setTimer>
			}

			if (timer_flag[0] == 1) {
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <fsm_traffic_ver+0x248>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d11a      	bne.n	80004e8 <fsm_traffic_ver+0x228>
				traffic_buffer_ver[0] = time_red_ver * 1000; //lưu time cho đèn xanh sáng
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <fsm_traffic_ver+0x234>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ba:	fb02 f303 	mul.w	r3, r2, r3
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <fsm_traffic_ver+0x238>)
 80004c0:	6013      	str	r3, [r2, #0]
				setTimer(0, traffic_buffer_ver[0]);
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <fsm_traffic_ver+0x238>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4619      	mov	r1, r3
 80004c8:	2000      	movs	r0, #0
 80004ca:	f001 f83b 	bl	8001544 <setTimer>
				setTimer(5, 1000);
 80004ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d2:	2005      	movs	r0, #5
 80004d4:	f001 f836 	bl	8001544 <setTimer>
				status_traffic_ver = RED_VER;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <fsm_traffic_ver+0x230>)
 80004da:	2206      	movs	r2, #6
 80004dc:	601a      	str	r2, [r3, #0]
			}
			break;
 80004de:	e003      	b.n	80004e8 <fsm_traffic_ver+0x228>
			break;
 80004e0:	bf00      	nop
 80004e2:	e002      	b.n	80004ea <fsm_traffic_ver+0x22a>
			break;
 80004e4:	bf00      	nop
 80004e6:	e000      	b.n	80004ea <fsm_traffic_ver+0x22a>
			break;
 80004e8:	bf00      	nop
	}
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200000a4 	.word	0x200000a4
 80004f4:	200000b4 	.word	0x200000b4
 80004f8:	2000010c 	.word	0x2000010c
 80004fc:	200000bc 	.word	0x200000bc
 8000500:	66666667 	.word	0x66666667
 8000504:	2000012c 	.word	0x2000012c
 8000508:	200001d4 	.word	0x200001d4
 800050c:	200000d4 	.word	0x200000d4
 8000510:	200000dc 	.word	0x200000dc
 8000514:	200000c4 	.word	0x200000c4
 8000518:	200000cc 	.word	0x200000cc

0800051c <fsm_traffic_hor>:

void fsm_traffic_hor() {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	switch (status_traffic_hor) {
 8000520:	4b8a      	ldr	r3, [pc, #552]	; (800074c <fsm_traffic_hor+0x230>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3b09      	subs	r3, #9
 8000526:	2b03      	cmp	r3, #3
 8000528:	f200 810d 	bhi.w	8000746 <fsm_traffic_hor+0x22a>
 800052c:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <fsm_traffic_hor+0x18>)
 800052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000532:	bf00      	nop
 8000534:	08000545 	.word	0x08000545
 8000538:	080006a5 	.word	0x080006a5
 800053c:	0800060d 	.word	0x0800060d
 8000540:	08000573 	.word	0x08000573
		case INIT_HOR:
			traffic_buffer_hor[0] = time_green_hor * 1000;
 8000544:	4b82      	ldr	r3, [pc, #520]	; (8000750 <fsm_traffic_hor+0x234>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800054c:	fb02 f303 	mul.w	r3, r2, r3
 8000550:	4a80      	ldr	r2, [pc, #512]	; (8000754 <fsm_traffic_hor+0x238>)
 8000552:	6013      	str	r3, [r2, #0]
			setTimer(1, traffic_buffer_hor[0]);
 8000554:	4b7f      	ldr	r3, [pc, #508]	; (8000754 <fsm_traffic_hor+0x238>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fff2 	bl	8001544 <setTimer>
			setTimer(6, 1000); //count down
 8000560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000564:	2006      	movs	r0, #6
 8000566:	f000 ffed 	bl	8001544 <setTimer>
			status_traffic_hor = GREEN_HOR;
 800056a:	4b78      	ldr	r3, [pc, #480]	; (800074c <fsm_traffic_hor+0x230>)
 800056c:	220c      	movs	r2, #12
 800056e:	601a      	str	r2, [r3, #0]
			break;
 8000570:	e0e9      	b.n	8000746 <fsm_traffic_hor+0x22a>
		case GREEN_HOR:
			green_led_hor();
 8000572:	f001 f933 	bl	80017dc <green_led_hor>
			led_buffer_hor[0] = time_green_hor_temp / 10;
 8000576:	4b78      	ldr	r3, [pc, #480]	; (8000758 <fsm_traffic_hor+0x23c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a78      	ldr	r2, [pc, #480]	; (800075c <fsm_traffic_hor+0x240>)
 800057c:	fb82 1203 	smull	r1, r2, r2, r3
 8000580:	1092      	asrs	r2, r2, #2
 8000582:	17db      	asrs	r3, r3, #31
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	4a76      	ldr	r2, [pc, #472]	; (8000760 <fsm_traffic_hor+0x244>)
 8000588:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_green_hor_temp % 10;
 800058a:	4b73      	ldr	r3, [pc, #460]	; (8000758 <fsm_traffic_hor+0x23c>)
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	4b73      	ldr	r3, [pc, #460]	; (800075c <fsm_traffic_hor+0x240>)
 8000590:	fb83 2301 	smull	r2, r3, r3, r1
 8000594:	109a      	asrs	r2, r3, #2
 8000596:	17cb      	asrs	r3, r1, #31
 8000598:	1ad2      	subs	r2, r2, r3
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	1aca      	subs	r2, r1, r3
 80005a4:	4b6e      	ldr	r3, [pc, #440]	; (8000760 <fsm_traffic_hor+0x244>)
 80005a6:	605a      	str	r2, [r3, #4]

			if (timer_flag[6] == 1) {
 80005a8:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <fsm_traffic_hor+0x248>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d111      	bne.n	80005d4 <fsm_traffic_hor+0xb8>
				time_green_hor_temp--;
 80005b0:	4b69      	ldr	r3, [pc, #420]	; (8000758 <fsm_traffic_hor+0x23c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	3b01      	subs	r3, #1
 80005b6:	4a68      	ldr	r2, [pc, #416]	; (8000758 <fsm_traffic_hor+0x23c>)
 80005b8:	6013      	str	r3, [r2, #0]
				if (time_green_hor_temp == 0) {
 80005ba:	4b67      	ldr	r3, [pc, #412]	; (8000758 <fsm_traffic_hor+0x23c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <fsm_traffic_hor+0xae>
					time_green_hor_temp = time_green_hor;
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <fsm_traffic_hor+0x234>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a64      	ldr	r2, [pc, #400]	; (8000758 <fsm_traffic_hor+0x23c>)
 80005c8:	6013      	str	r3, [r2, #0]
				}
				setTimer(6, 1000);
 80005ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005ce:	2006      	movs	r0, #6
 80005d0:	f000 ffb8 	bl	8001544 <setTimer>
			}
			if (timer_flag[1] == 1) {
 80005d4:	4b63      	ldr	r3, [pc, #396]	; (8000764 <fsm_traffic_hor+0x248>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	f040 80af 	bne.w	800073c <fsm_traffic_hor+0x220>
				traffic_buffer_hor[1] = time_yellow_hor * 1000;
 80005de:	4b62      	ldr	r3, [pc, #392]	; (8000768 <fsm_traffic_hor+0x24c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4a5a      	ldr	r2, [pc, #360]	; (8000754 <fsm_traffic_hor+0x238>)
 80005ec:	6053      	str	r3, [r2, #4]
				setTimer(1, traffic_buffer_hor[1]);
 80005ee:	4b59      	ldr	r3, [pc, #356]	; (8000754 <fsm_traffic_hor+0x238>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 ffa5 	bl	8001544 <setTimer>
				setTimer(6, 1000);
 80005fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005fe:	2006      	movs	r0, #6
 8000600:	f000 ffa0 	bl	8001544 <setTimer>
				status_traffic_hor = YELLOW_HOR;
 8000604:	4b51      	ldr	r3, [pc, #324]	; (800074c <fsm_traffic_hor+0x230>)
 8000606:	220b      	movs	r2, #11
 8000608:	601a      	str	r2, [r3, #0]
			}
			break;
 800060a:	e097      	b.n	800073c <fsm_traffic_hor+0x220>
		case YELLOW_HOR:
			yellow_led_hor();
 800060c:	f001 f8d0 	bl	80017b0 <yellow_led_hor>
			led_buffer_hor[0] = time_yellow_hor_temp / 10;
 8000610:	4b56      	ldr	r3, [pc, #344]	; (800076c <fsm_traffic_hor+0x250>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a51      	ldr	r2, [pc, #324]	; (800075c <fsm_traffic_hor+0x240>)
 8000616:	fb82 1203 	smull	r1, r2, r2, r3
 800061a:	1092      	asrs	r2, r2, #2
 800061c:	17db      	asrs	r3, r3, #31
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a4f      	ldr	r2, [pc, #316]	; (8000760 <fsm_traffic_hor+0x244>)
 8000622:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_yellow_hor_temp % 10;
 8000624:	4b51      	ldr	r3, [pc, #324]	; (800076c <fsm_traffic_hor+0x250>)
 8000626:	6819      	ldr	r1, [r3, #0]
 8000628:	4b4c      	ldr	r3, [pc, #304]	; (800075c <fsm_traffic_hor+0x240>)
 800062a:	fb83 2301 	smull	r2, r3, r3, r1
 800062e:	109a      	asrs	r2, r3, #2
 8000630:	17cb      	asrs	r3, r1, #31
 8000632:	1ad2      	subs	r2, r2, r3
 8000634:	4613      	mov	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	4413      	add	r3, r2
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	1aca      	subs	r2, r1, r3
 800063e:	4b48      	ldr	r3, [pc, #288]	; (8000760 <fsm_traffic_hor+0x244>)
 8000640:	605a      	str	r2, [r3, #4]

			if (timer_flag[6] == 1) {
 8000642:	4b48      	ldr	r3, [pc, #288]	; (8000764 <fsm_traffic_hor+0x248>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d111      	bne.n	800066e <fsm_traffic_hor+0x152>
				time_yellow_hor_temp--;
 800064a:	4b48      	ldr	r3, [pc, #288]	; (800076c <fsm_traffic_hor+0x250>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	4a46      	ldr	r2, [pc, #280]	; (800076c <fsm_traffic_hor+0x250>)
 8000652:	6013      	str	r3, [r2, #0]
				if (time_yellow_hor_temp == 0) {
 8000654:	4b45      	ldr	r3, [pc, #276]	; (800076c <fsm_traffic_hor+0x250>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <fsm_traffic_hor+0x148>
					time_yellow_hor_temp = time_yellow_hor;
 800065c:	4b42      	ldr	r3, [pc, #264]	; (8000768 <fsm_traffic_hor+0x24c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a42      	ldr	r2, [pc, #264]	; (800076c <fsm_traffic_hor+0x250>)
 8000662:	6013      	str	r3, [r2, #0]
				}
				setTimer(6, 1000);
 8000664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000668:	2006      	movs	r0, #6
 800066a:	f000 ff6b 	bl	8001544 <setTimer>
			}
			if (timer_flag[1] == 1) {
 800066e:	4b3d      	ldr	r3, [pc, #244]	; (8000764 <fsm_traffic_hor+0x248>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d164      	bne.n	8000740 <fsm_traffic_hor+0x224>
				traffic_buffer_hor[2] = time_red_hor * 1000;
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <fsm_traffic_hor+0x254>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <fsm_traffic_hor+0x238>)
 8000684:	6093      	str	r3, [r2, #8]
				setTimer(1, traffic_buffer_hor[2]);
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <fsm_traffic_hor+0x238>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	4619      	mov	r1, r3
 800068c:	2001      	movs	r0, #1
 800068e:	f000 ff59 	bl	8001544 <setTimer>
				setTimer(6, 1000);
 8000692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000696:	2006      	movs	r0, #6
 8000698:	f000 ff54 	bl	8001544 <setTimer>
				status_traffic_hor = RED_HOR;
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <fsm_traffic_hor+0x230>)
 800069e:	220a      	movs	r2, #10
 80006a0:	601a      	str	r2, [r3, #0]
			}
			break;
 80006a2:	e04d      	b.n	8000740 <fsm_traffic_hor+0x224>
		case RED_HOR:
			red_led_hor();
 80006a4:	f001 f86e 	bl	8001784 <red_led_hor>
			led_buffer_hor[0] = time_red_hor_temp / 10;
 80006a8:	4b32      	ldr	r3, [pc, #200]	; (8000774 <fsm_traffic_hor+0x258>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a2b      	ldr	r2, [pc, #172]	; (800075c <fsm_traffic_hor+0x240>)
 80006ae:	fb82 1203 	smull	r1, r2, r2, r3
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	17db      	asrs	r3, r3, #31
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	4a29      	ldr	r2, [pc, #164]	; (8000760 <fsm_traffic_hor+0x244>)
 80006ba:	6013      	str	r3, [r2, #0]
			led_buffer_hor[1] = time_red_hor_temp % 10;
 80006bc:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <fsm_traffic_hor+0x258>)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <fsm_traffic_hor+0x240>)
 80006c2:	fb83 2301 	smull	r2, r3, r3, r1
 80006c6:	109a      	asrs	r2, r3, #2
 80006c8:	17cb      	asrs	r3, r1, #31
 80006ca:	1ad2      	subs	r2, r2, r3
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	1aca      	subs	r2, r1, r3
 80006d6:	4b22      	ldr	r3, [pc, #136]	; (8000760 <fsm_traffic_hor+0x244>)
 80006d8:	605a      	str	r2, [r3, #4]

			if (timer_flag[6] == 1) {
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <fsm_traffic_hor+0x248>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d111      	bne.n	8000706 <fsm_traffic_hor+0x1ea>
				time_red_hor_temp--;
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <fsm_traffic_hor+0x258>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a22      	ldr	r2, [pc, #136]	; (8000774 <fsm_traffic_hor+0x258>)
 80006ea:	6013      	str	r3, [r2, #0]
				if (time_red_hor_temp == 0) {
 80006ec:	4b21      	ldr	r3, [pc, #132]	; (8000774 <fsm_traffic_hor+0x258>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <fsm_traffic_hor+0x1e0>
					time_red_hor_temp = time_red_hor;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <fsm_traffic_hor+0x254>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <fsm_traffic_hor+0x258>)
 80006fa:	6013      	str	r3, [r2, #0]
				}
				setTimer(6, 1000);
 80006fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000700:	2006      	movs	r0, #6
 8000702:	f000 ff1f 	bl	8001544 <setTimer>
			}
			if (timer_flag[1] == 1) {
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <fsm_traffic_hor+0x248>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d11a      	bne.n	8000744 <fsm_traffic_hor+0x228>
				traffic_buffer_hor[0] = time_green_hor * 1000;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <fsm_traffic_hor+0x234>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <fsm_traffic_hor+0x238>)
 800071c:	6013      	str	r3, [r2, #0]
				setTimer(1, traffic_buffer_hor[0]);
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <fsm_traffic_hor+0x238>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	2001      	movs	r0, #1
 8000726:	f000 ff0d 	bl	8001544 <setTimer>
				setTimer(6, 1000);
 800072a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072e:	2006      	movs	r0, #6
 8000730:	f000 ff08 	bl	8001544 <setTimer>
				status_traffic_hor = GREEN_HOR;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <fsm_traffic_hor+0x230>)
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
			}
			break;
 800073a:	e003      	b.n	8000744 <fsm_traffic_hor+0x228>
			break;
 800073c:	bf00      	nop
 800073e:	e002      	b.n	8000746 <fsm_traffic_hor+0x22a>
			break;
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <fsm_traffic_hor+0x22a>
			break;
 8000744:	bf00      	nop
	}
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000a8 	.word	0x200000a8
 8000750:	200000d8 	.word	0x200000d8
 8000754:	20000118 	.word	0x20000118
 8000758:	200000e0 	.word	0x200000e0
 800075c:	66666667 	.word	0x66666667
 8000760:	20000134 	.word	0x20000134
 8000764:	200001d4 	.word	0x200001d4
 8000768:	200000c8 	.word	0x200000c8
 800076c:	200000d0 	.word	0x200000d0
 8000770:	200000b8 	.word	0x200000b8
 8000774:	200000c0 	.word	0x200000c0

08000778 <fsm_automatic>:

void fsm_automatic() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	fsm_traffic_ver();
 800077c:	f7ff fda0 	bl	80002c0 <fsm_traffic_ver>
	fsm_traffic_hor();
 8000780:	f7ff fecc 	bl	800051c <fsm_traffic_hor>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <fsm_manual>:
 */
#include "fsm_manual.h"

int status_system = AUTO;

void fsm_manual() {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	switch(status_system) {
 800078c:	4b5f      	ldr	r3, [pc, #380]	; (800090c <fsm_manual+0x184>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3b01      	subs	r3, #1
 8000792:	2b03      	cmp	r3, #3
 8000794:	f200 808c 	bhi.w	80008b0 <fsm_manual+0x128>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <fsm_manual+0x18>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007c9 	.word	0x080007c9
 80007a8:	08000803 	.word	0x08000803
 80007ac:	0800084d 	.word	0x0800084d
		case AUTO: //đèn hoạt động bình thường
			fsm_automatic();
 80007b0:	f7ff ffe2 	bl	8000778 <fsm_automatic>
			//button1
			if (isButtonPressed(0) == 1) {
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fcc9 	bl	800014c <isButtonPressed>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d170      	bne.n	80008a2 <fsm_manual+0x11a>
				status_system = RED_LED;
 80007c0:	4b52      	ldr	r3, [pc, #328]	; (800090c <fsm_manual+0x184>)
 80007c2:	2202      	movs	r2, #2
 80007c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80007c6:	e06c      	b.n	80008a2 <fsm_manual+0x11a>
		case RED_LED: //thiết lập time cho 4 led red
			status_modify = RED_MODIFY;
 80007c8:	4b51      	ldr	r3, [pc, #324]	; (8000910 <fsm_manual+0x188>)
 80007ca:	220d      	movs	r2, #13
 80007cc:	601a      	str	r2, [r3, #0]
			fsm_setting();
 80007ce:	f000 f8c3 	bl	8000958 <fsm_setting>
			//button3
			if (isButtonPressed(2) == 1) {
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff fcba 	bl	800014c <isButtonPressed>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d107      	bne.n	80007ee <fsm_manual+0x66>
				time_red_ver_temp = time_red_ver;
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <fsm_manual+0x18c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a4d      	ldr	r2, [pc, #308]	; (8000918 <fsm_manual+0x190>)
 80007e4:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 80007e6:	4b4d      	ldr	r3, [pc, #308]	; (800091c <fsm_manual+0x194>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a4d      	ldr	r2, [pc, #308]	; (8000920 <fsm_manual+0x198>)
 80007ec:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fcac 	bl	800014c <isButtonPressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d155      	bne.n	80008a6 <fsm_manual+0x11e>
				status_system = YELLOW_LED;
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <fsm_manual+0x184>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	601a      	str	r2, [r3, #0]
			}
			break;
 8000800:	e051      	b.n	80008a6 <fsm_manual+0x11e>
		case YELLOW_LED: //thiết lập time cho 4 led yellow
			status_modify = YELLOW_MODIFY;
 8000802:	4b43      	ldr	r3, [pc, #268]	; (8000910 <fsm_manual+0x188>)
 8000804:	220e      	movs	r2, #14
 8000806:	601a      	str	r2, [r3, #0]
			fsm_setting();
 8000808:	f000 f8a6 	bl	8000958 <fsm_setting>
			//button3
			if (isButtonPressed(2) == 1) {
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff fc9d 	bl	800014c <isButtonPressed>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d10f      	bne.n	8000838 <fsm_manual+0xb0>
				time_yellow_ver_temp = time_yellow_ver;
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <fsm_manual+0x19c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a42      	ldr	r2, [pc, #264]	; (8000928 <fsm_manual+0x1a0>)
 800081e:	6013      	str	r3, [r2, #0]
				time_yellow_hor_temp = time_yellow_hor;
 8000820:	4b42      	ldr	r3, [pc, #264]	; (800092c <fsm_manual+0x1a4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a42      	ldr	r2, [pc, #264]	; (8000930 <fsm_manual+0x1a8>)
 8000826:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 8000828:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <fsm_manual+0x18c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <fsm_manual+0x190>)
 800082e:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <fsm_manual+0x194>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a3a      	ldr	r2, [pc, #232]	; (8000920 <fsm_manual+0x198>)
 8000836:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff fc87 	bl	800014c <isButtonPressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d132      	bne.n	80008aa <fsm_manual+0x122>
				status_system = GREEN_LED;
 8000844:	4b31      	ldr	r3, [pc, #196]	; (800090c <fsm_manual+0x184>)
 8000846:	2204      	movs	r2, #4
 8000848:	601a      	str	r2, [r3, #0]
			}
			break;
 800084a:	e02e      	b.n	80008aa <fsm_manual+0x122>
		case GREEN_LED: ////thiết lập time cho 4 led green
			status_modify = GREEN_MODIFY;
 800084c:	4b30      	ldr	r3, [pc, #192]	; (8000910 <fsm_manual+0x188>)
 800084e:	220f      	movs	r2, #15
 8000850:	601a      	str	r2, [r3, #0]
			fsm_setting();
 8000852:	f000 f881 	bl	8000958 <fsm_setting>
			//button3
			if (isButtonPressed(2) == 1) {
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fc78 	bl	800014c <isButtonPressed>
 800085c:	4603      	mov	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d10f      	bne.n	8000882 <fsm_manual+0xfa>
				time_green_ver_temp = time_green_ver;
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <fsm_manual+0x1ac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a34      	ldr	r2, [pc, #208]	; (8000938 <fsm_manual+0x1b0>)
 8000868:	6013      	str	r3, [r2, #0]
				time_green_hor_temp = time_green_hor;
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <fsm_manual+0x1b4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a34      	ldr	r2, [pc, #208]	; (8000940 <fsm_manual+0x1b8>)
 8000870:	6013      	str	r3, [r2, #0]
				//sau khi check cập nhật lại countdown đèn đỏ
				time_red_ver_temp = time_red_ver;
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <fsm_manual+0x18c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <fsm_manual+0x190>)
 8000878:	6013      	str	r3, [r2, #0]
				time_red_hor_temp = time_red_hor;
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <fsm_manual+0x194>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a28      	ldr	r2, [pc, #160]	; (8000920 <fsm_manual+0x198>)
 8000880:	6013      	str	r3, [r2, #0]
			}
			//button1
			if (isButtonPressed(0) == 1) {
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fc62 	bl	800014c <isButtonPressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10f      	bne.n	80008ae <fsm_manual+0x126>
				status_traffic_ver = INIT_VER;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <fsm_manual+0x1bc>)
 8000890:	2205      	movs	r2, #5
 8000892:	601a      	str	r2, [r3, #0]
				status_traffic_hor = INIT_HOR;
 8000894:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <fsm_manual+0x1c0>)
 8000896:	2209      	movs	r2, #9
 8000898:	601a      	str	r2, [r3, #0]
				status_system = AUTO;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <fsm_manual+0x184>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
			}
			break;
 80008a0:	e005      	b.n	80008ae <fsm_manual+0x126>
			break;
 80008a2:	bf00      	nop
 80008a4:	e004      	b.n	80008b0 <fsm_manual+0x128>
			break;
 80008a6:	bf00      	nop
 80008a8:	e002      	b.n	80008b0 <fsm_manual+0x128>
			break;
 80008aa:	bf00      	nop
 80008ac:	e000      	b.n	80008b0 <fsm_manual+0x128>
			break;
 80008ae:	bf00      	nop
	}
	//hiển thị led
	if (timer_flag[2] == 1) {
 80008b0:	4b26      	ldr	r3, [pc, #152]	; (800094c <fsm_manual+0x1c4>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d126      	bne.n	8000906 <fsm_manual+0x17e>
		update_7SEG_ver(idx_vertical);
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <fsm_manual+0x1c8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fca5 	bl	800120c <update_7SEG_ver>
		idx_vertical++;
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <fsm_manual+0x1c8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3301      	adds	r3, #1
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <fsm_manual+0x1c8>)
 80008ca:	6013      	str	r3, [r2, #0]
		if(idx_vertical == 2) {
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <fsm_manual+0x1c8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d102      	bne.n	80008da <fsm_manual+0x152>
			idx_vertical = 0;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <fsm_manual+0x1c8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
		}

		update_7SEG_hor(idx_horizontal);
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <fsm_manual+0x1cc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fcca 	bl	8001278 <update_7SEG_hor>
		idx_horizontal++;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <fsm_manual+0x1cc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <fsm_manual+0x1cc>)
 80008ec:	6013      	str	r3, [r2, #0]
		if (idx_horizontal == 2) {
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <fsm_manual+0x1cc>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d102      	bne.n	80008fc <fsm_manual+0x174>
			idx_horizontal = 0;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <fsm_manual+0x1cc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
		}
		setTimer(2, 500);
 80008fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000900:	2002      	movs	r0, #2
 8000902:	f000 fe1f 	bl	8001544 <setTimer>
	}
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000ac 	.word	0x200000ac
 8000910:	200000b0 	.word	0x200000b0
 8000914:	200000b4 	.word	0x200000b4
 8000918:	200000bc 	.word	0x200000bc
 800091c:	200000b8 	.word	0x200000b8
 8000920:	200000c0 	.word	0x200000c0
 8000924:	200000c4 	.word	0x200000c4
 8000928:	200000cc 	.word	0x200000cc
 800092c:	200000c8 	.word	0x200000c8
 8000930:	200000d0 	.word	0x200000d0
 8000934:	200000d4 	.word	0x200000d4
 8000938:	200000dc 	.word	0x200000dc
 800093c:	200000d8 	.word	0x200000d8
 8000940:	200000e0 	.word	0x200000e0
 8000944:	200000a4 	.word	0x200000a4
 8000948:	200000a8 	.word	0x200000a8
 800094c:	200001d4 	.word	0x200001d4
 8000950:	20000124 	.word	0x20000124
 8000954:	20000128 	.word	0x20000128

08000958 <fsm_setting>:
 */
#include "fsm_setting.h"

int status_modify = RED_MODIFY;

void fsm_setting() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	switch (status_modify) {
 800095c:	4b75      	ldr	r3, [pc, #468]	; (8000b34 <fsm_setting+0x1dc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	f000 8095 	beq.w	8000a90 <fsm_setting+0x138>
 8000966:	2b0f      	cmp	r3, #15
 8000968:	f300 80e2 	bgt.w	8000b30 <fsm_setting+0x1d8>
 800096c:	2b0d      	cmp	r3, #13
 800096e:	d002      	beq.n	8000976 <fsm_setting+0x1e>
 8000970:	2b0e      	cmp	r3, #14
 8000972:	d03d      	beq.n	80009f0 <fsm_setting+0x98>
			led_buffer_ver[1] = time_green_ver % 10;
			led_buffer_hor[0] = 0;
			led_buffer_hor[1] = 3;
			break;
	}
}
 8000974:	e0dc      	b.n	8000b30 <fsm_setting+0x1d8>
			turn_off_yellow_green();
 8000976:	f000 ff73 	bl	8001860 <turn_off_yellow_green>
			if (timer_flag[4] == 1) {
 800097a:	4b6f      	ldr	r3, [pc, #444]	; (8000b38 <fsm_setting+0x1e0>)
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d106      	bne.n	8000990 <fsm_setting+0x38>
				toggle_red_led();
 8000982:	f000 ff41 	bl	8001808 <toggle_red_led>
				setTimer(4, 500);
 8000986:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098a:	2004      	movs	r0, #4
 800098c:	f000 fdda 	bl	8001544 <setTimer>
			if (isButtonPressed(1) == 1) {
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fbdb 	bl	800014c <isButtonPressed>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d109      	bne.n	80009b0 <fsm_setting+0x58>
				time_red_ver++;
 800099c:	4b67      	ldr	r3, [pc, #412]	; (8000b3c <fsm_setting+0x1e4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a66      	ldr	r2, [pc, #408]	; (8000b3c <fsm_setting+0x1e4>)
 80009a4:	6013      	str	r3, [r2, #0]
				time_red_hor++;
 80009a6:	4b66      	ldr	r3, [pc, #408]	; (8000b40 <fsm_setting+0x1e8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a64      	ldr	r2, [pc, #400]	; (8000b40 <fsm_setting+0x1e8>)
 80009ae:	6013      	str	r3, [r2, #0]
			led_buffer_ver[0] = time_red_ver / 10;
 80009b0:	4b62      	ldr	r3, [pc, #392]	; (8000b3c <fsm_setting+0x1e4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a63      	ldr	r2, [pc, #396]	; (8000b44 <fsm_setting+0x1ec>)
 80009b6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ba:	1092      	asrs	r2, r2, #2
 80009bc:	17db      	asrs	r3, r3, #31
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	4a61      	ldr	r2, [pc, #388]	; (8000b48 <fsm_setting+0x1f0>)
 80009c2:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_red_ver % 10;
 80009c4:	4b5d      	ldr	r3, [pc, #372]	; (8000b3c <fsm_setting+0x1e4>)
 80009c6:	6819      	ldr	r1, [r3, #0]
 80009c8:	4b5e      	ldr	r3, [pc, #376]	; (8000b44 <fsm_setting+0x1ec>)
 80009ca:	fb83 2301 	smull	r2, r3, r3, r1
 80009ce:	109a      	asrs	r2, r3, #2
 80009d0:	17cb      	asrs	r3, r1, #31
 80009d2:	1ad2      	subs	r2, r2, r3
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	1aca      	subs	r2, r1, r3
 80009de:	4b5a      	ldr	r3, [pc, #360]	; (8000b48 <fsm_setting+0x1f0>)
 80009e0:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 80009e2:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <fsm_setting+0x1f4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 1;
 80009e8:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <fsm_setting+0x1f4>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]
			break;
 80009ee:	e09f      	b.n	8000b30 <fsm_setting+0x1d8>
			turn_off_red_green();
 80009f0:	f000 ff52 	bl	8001898 <turn_off_red_green>
			if (timer_flag[4] == 1) {
 80009f4:	4b50      	ldr	r3, [pc, #320]	; (8000b38 <fsm_setting+0x1e0>)
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d106      	bne.n	8000a0a <fsm_setting+0xb2>
				toggle_yellow_led();
 80009fc:	f000 ff12 	bl	8001824 <toggle_yellow_led>
				setTimer(4, 500);
 8000a00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a04:	2004      	movs	r0, #4
 8000a06:	f000 fd9d 	bl	8001544 <setTimer>
			if (isButtonPressed(1) == 1) {
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fb9e 	bl	800014c <isButtonPressed>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d11c      	bne.n	8000a50 <fsm_setting+0xf8>
				time_yellow_ver++;
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <fsm_setting+0x1f8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <fsm_setting+0x1f8>)
 8000a1e:	6013      	str	r3, [r2, #0]
				time_yellow_hor++;
 8000a20:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <fsm_setting+0x1fc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <fsm_setting+0x1fc>)
 8000a28:	6013      	str	r3, [r2, #0]
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <fsm_setting+0x1f8>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <fsm_setting+0x200>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	441a      	add	r2, r3
 8000a34:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <fsm_setting+0x1e4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dd09      	ble.n	8000a50 <fsm_setting+0xf8>
					time_red_ver++;
 8000a3c:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <fsm_setting+0x1e4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <fsm_setting+0x1e4>)
 8000a44:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <fsm_setting+0x1e8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <fsm_setting+0x1e8>)
 8000a4e:	6013      	str	r3, [r2, #0]
			led_buffer_ver[0] = time_yellow_ver / 10;
 8000a50:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <fsm_setting+0x1f8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a3b      	ldr	r2, [pc, #236]	; (8000b44 <fsm_setting+0x1ec>)
 8000a56:	fb82 1203 	smull	r1, r2, r2, r3
 8000a5a:	1092      	asrs	r2, r2, #2
 8000a5c:	17db      	asrs	r3, r3, #31
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	4a39      	ldr	r2, [pc, #228]	; (8000b48 <fsm_setting+0x1f0>)
 8000a62:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_yellow_ver % 10;
 8000a64:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <fsm_setting+0x1f8>)
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <fsm_setting+0x1ec>)
 8000a6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a6e:	109a      	asrs	r2, r3, #2
 8000a70:	17cb      	asrs	r3, r1, #31
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1aca      	subs	r2, r1, r3
 8000a7e:	4b32      	ldr	r3, [pc, #200]	; (8000b48 <fsm_setting+0x1f0>)
 8000a80:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 8000a82:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <fsm_setting+0x1f4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 2;
 8000a88:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <fsm_setting+0x1f4>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	605a      	str	r2, [r3, #4]
			break;
 8000a8e:	e04f      	b.n	8000b30 <fsm_setting+0x1d8>
			turn_off_red_yellow();
 8000a90:	f000 ff1e 	bl	80018d0 <turn_off_red_yellow>
			if (timer_flag[4] == 1) {
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <fsm_setting+0x1e0>)
 8000a96:	691b      	ldr	r3, [r3, #16]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <fsm_setting+0x152>
				toggle_green_led();
 8000a9c:	f000 fed0 	bl	8001840 <toggle_green_led>
				setTimer(4, 500);
 8000aa0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f000 fd4d 	bl	8001544 <setTimer>
			if (isButtonPressed(1) == 1) {
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff fb4e 	bl	800014c <isButtonPressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d11c      	bne.n	8000af0 <fsm_setting+0x198>
				time_green_ver++;
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <fsm_setting+0x200>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <fsm_setting+0x200>)
 8000abe:	6013      	str	r3, [r2, #0]
				time_green_hor++;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <fsm_setting+0x204>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a25      	ldr	r2, [pc, #148]	; (8000b5c <fsm_setting+0x204>)
 8000ac8:	6013      	str	r3, [r2, #0]
				if (time_yellow_ver + time_green_ver > time_red_ver) {
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <fsm_setting+0x1f8>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <fsm_setting+0x200>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	441a      	add	r2, r3
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <fsm_setting+0x1e4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dd09      	ble.n	8000af0 <fsm_setting+0x198>
					time_red_ver++;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <fsm_setting+0x1e4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <fsm_setting+0x1e4>)
 8000ae4:	6013      	str	r3, [r2, #0]
					time_red_hor++;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <fsm_setting+0x1e8>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <fsm_setting+0x1e8>)
 8000aee:	6013      	str	r3, [r2, #0]
			led_buffer_ver[0] = time_green_ver / 10;
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <fsm_setting+0x200>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <fsm_setting+0x1ec>)
 8000af6:	fb82 1203 	smull	r1, r2, r2, r3
 8000afa:	1092      	asrs	r2, r2, #2
 8000afc:	17db      	asrs	r3, r3, #31
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <fsm_setting+0x1f0>)
 8000b02:	6013      	str	r3, [r2, #0]
			led_buffer_ver[1] = time_green_ver % 10;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <fsm_setting+0x200>)
 8000b06:	6819      	ldr	r1, [r3, #0]
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <fsm_setting+0x1ec>)
 8000b0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b0e:	109a      	asrs	r2, r3, #2
 8000b10:	17cb      	asrs	r3, r1, #31
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	1aca      	subs	r2, r1, r3
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <fsm_setting+0x1f0>)
 8000b20:	605a      	str	r2, [r3, #4]
			led_buffer_hor[0] = 0;
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <fsm_setting+0x1f4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
			led_buffer_hor[1] = 3;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <fsm_setting+0x1f4>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	605a      	str	r2, [r3, #4]
			break;
 8000b2e:	bf00      	nop
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200000b0 	.word	0x200000b0
 8000b38:	200001d4 	.word	0x200001d4
 8000b3c:	200000b4 	.word	0x200000b4
 8000b40:	200000b8 	.word	0x200000b8
 8000b44:	66666667 	.word	0x66666667
 8000b48:	2000012c 	.word	0x2000012c
 8000b4c:	20000134 	.word	0x20000134
 8000b50:	200000c4 	.word	0x200000c4
 8000b54:	200000c8 	.word	0x200000c8
 8000b58:	200000d4 	.word	0x200000d4
 8000b5c:	200000d8 	.word	0x200000d8

08000b60 <display7SEG_ver>:
//biến giá trị đầu vào của 7SEG;
int led_buffer_ver[2] = {0, 0};
int led_buffer_hor[2] = {0, 0};

//hiển thị led7
void display7SEG_ver(int num) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d129      	bne.n	8000bc2 <display7SEG_ver+0x62>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b74:	48d3      	ldr	r0, [pc, #844]	; (8000ec4 <display7SEG_ver+0x364>)
 8000b76:	f001 f9ec 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b80:	48d0      	ldr	r0, [pc, #832]	; (8000ec4 <display7SEG_ver+0x364>)
 8000b82:	f001 f9e6 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8c:	48cd      	ldr	r0, [pc, #820]	; (8000ec4 <display7SEG_ver+0x364>)
 8000b8e:	f001 f9e0 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b98:	48ca      	ldr	r0, [pc, #808]	; (8000ec4 <display7SEG_ver+0x364>)
 8000b9a:	f001 f9da 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba4:	48c7      	ldr	r0, [pc, #796]	; (8000ec4 <display7SEG_ver+0x364>)
 8000ba6:	f001 f9d4 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb0:	48c4      	ldr	r0, [pc, #784]	; (8000ec4 <display7SEG_ver+0x364>)
 8000bb2:	f001 f9ce 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bbc:	48c1      	ldr	r0, [pc, #772]	; (8000ec4 <display7SEG_ver+0x364>)
 8000bbe:	f001 f9c8 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d129      	bne.n	8000c1c <display7SEG_ver+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bce:	48bd      	ldr	r0, [pc, #756]	; (8000ec4 <display7SEG_ver+0x364>)
 8000bd0:	f001 f9bf 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	48ba      	ldr	r0, [pc, #744]	; (8000ec4 <display7SEG_ver+0x364>)
 8000bdc:	f001 f9b9 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be6:	48b7      	ldr	r0, [pc, #732]	; (8000ec4 <display7SEG_ver+0x364>)
 8000be8:	f001 f9b3 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	48b4      	ldr	r0, [pc, #720]	; (8000ec4 <display7SEG_ver+0x364>)
 8000bf4:	f001 f9ad 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfe:	48b1      	ldr	r0, [pc, #708]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c00:	f001 f9a7 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0a:	48ae      	ldr	r0, [pc, #696]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c0c:	f001 f9a1 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c16:	48ab      	ldr	r0, [pc, #684]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c18:	f001 f99b 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d129      	bne.n	8000c76 <display7SEG_ver+0x116>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c28:	48a6      	ldr	r0, [pc, #664]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c2a:	f001 f992 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c34:	48a3      	ldr	r0, [pc, #652]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c36:	f001 f98c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c40:	48a0      	ldr	r0, [pc, #640]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c42:	f001 f986 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4c:	489d      	ldr	r0, [pc, #628]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c4e:	f001 f980 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	489a      	ldr	r0, [pc, #616]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c5a:	f001 f97a 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c64:	4897      	ldr	r0, [pc, #604]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c66:	f001 f974 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c70:	4894      	ldr	r0, [pc, #592]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c72:	f001 f96e 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d129      	bne.n	8000cd0 <display7SEG_ver+0x170>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4890      	ldr	r0, [pc, #576]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c84:	f001 f965 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	488d      	ldr	r0, [pc, #564]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c90:	f001 f95f 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9a:	488a      	ldr	r0, [pc, #552]	; (8000ec4 <display7SEG_ver+0x364>)
 8000c9c:	f001 f959 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca6:	4887      	ldr	r0, [pc, #540]	; (8000ec4 <display7SEG_ver+0x364>)
 8000ca8:	f001 f953 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb2:	4884      	ldr	r0, [pc, #528]	; (8000ec4 <display7SEG_ver+0x364>)
 8000cb4:	f001 f94d 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4881      	ldr	r0, [pc, #516]	; (8000ec4 <display7SEG_ver+0x364>)
 8000cc0:	f001 f947 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cca:	487e      	ldr	r0, [pc, #504]	; (8000ec4 <display7SEG_ver+0x364>)
 8000ccc:	f001 f941 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d129      	bne.n	8000d2a <display7SEG_ver+0x1ca>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cdc:	4879      	ldr	r0, [pc, #484]	; (8000ec4 <display7SEG_ver+0x364>)
 8000cde:	f001 f938 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce8:	4876      	ldr	r0, [pc, #472]	; (8000ec4 <display7SEG_ver+0x364>)
 8000cea:	f001 f932 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <display7SEG_ver+0x364>)
 8000cf6:	f001 f92c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d00:	4870      	ldr	r0, [pc, #448]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d02:	f001 f926 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0c:	486d      	ldr	r0, [pc, #436]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d0e:	f001 f920 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d18:	486a      	ldr	r0, [pc, #424]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d1a:	f001 f91a 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d24:	4867      	ldr	r0, [pc, #412]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d26:	f001 f914 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d129      	bne.n	8000d84 <display7SEG_ver+0x224>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	4863      	ldr	r0, [pc, #396]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d38:	f001 f90b 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4860      	ldr	r0, [pc, #384]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d44:	f001 f905 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4e:	485d      	ldr	r0, [pc, #372]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d50:	f001 f8ff 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5a:	485a      	ldr	r0, [pc, #360]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d5c:	f001 f8f9 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d68:	f001 f8f3 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d72:	4854      	ldr	r0, [pc, #336]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d74:	f001 f8ed 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d80:	f001 f8e7 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d129      	bne.n	8000dde <display7SEG_ver+0x27e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d90:	484c      	ldr	r0, [pc, #304]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d92:	f001 f8de 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9c:	4849      	ldr	r0, [pc, #292]	; (8000ec4 <display7SEG_ver+0x364>)
 8000d9e:	f001 f8d8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da8:	4846      	ldr	r0, [pc, #280]	; (8000ec4 <display7SEG_ver+0x364>)
 8000daa:	f001 f8d2 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	4843      	ldr	r0, [pc, #268]	; (8000ec4 <display7SEG_ver+0x364>)
 8000db6:	f001 f8cc 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4840      	ldr	r0, [pc, #256]	; (8000ec4 <display7SEG_ver+0x364>)
 8000dc2:	f001 f8c6 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dcc:	483d      	ldr	r0, [pc, #244]	; (8000ec4 <display7SEG_ver+0x364>)
 8000dce:	f001 f8c0 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd8:	483a      	ldr	r0, [pc, #232]	; (8000ec4 <display7SEG_ver+0x364>)
 8000dda:	f001 f8ba 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d129      	bne.n	8000e38 <display7SEG_ver+0x2d8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	4836      	ldr	r0, [pc, #216]	; (8000ec4 <display7SEG_ver+0x364>)
 8000dec:	f001 f8b1 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <display7SEG_ver+0x364>)
 8000df8:	f001 f8ab 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	4830      	ldr	r0, [pc, #192]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e04:	f001 f8a5 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	482d      	ldr	r0, [pc, #180]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e10:	f001 f89f 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e1a:	482a      	ldr	r0, [pc, #168]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e1c:	f001 f899 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4827      	ldr	r0, [pc, #156]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e28:	f001 f893 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e34:	f001 f88d 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d129      	bne.n	8000e92 <display7SEG_ver+0x332>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e46:	f001 f884 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e52:	f001 f87e 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e5e:	f001 f878 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e6a:	f001 f872 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e76:	f001 f86c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e82:	f001 f866 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <display7SEG_ver+0x364>)
 8000e8e:	f001 f860 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b09      	cmp	r3, #9
 8000e96:	d12c      	bne.n	8000ef2 <display7SEG_ver+0x392>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <display7SEG_ver+0x364>)
 8000ea0:	f001 f857 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <display7SEG_ver+0x364>)
 8000eac:	f001 f851 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <display7SEG_ver+0x364>)
 8000eb8:	f001 f84b 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	e001      	b.n	8000ec8 <display7SEG_ver+0x368>
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <display7SEG_ver+0x39c>)
 8000eca:	f001 f842 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <display7SEG_ver+0x39c>)
 8000ed6:	f001 f83c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <display7SEG_ver+0x39c>)
 8000ee2:	f001 f836 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <display7SEG_ver+0x39c>)
 8000eee:	f001 f830 	bl	8001f52 <HAL_GPIO_WritePin>
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40010800 	.word	0x40010800

08000f00 <display7SEG_hor>:

void display7SEG_hor(int num) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d122      	bne.n	8000f54 <display7SEG_hor+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	48bd      	ldr	r0, [pc, #756]	; (8001208 <display7SEG_hor+0x308>)
 8000f14:	f001 f81d 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	48ba      	ldr	r0, [pc, #744]	; (8001208 <display7SEG_hor+0x308>)
 8000f1e:	f001 f818 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	48b8      	ldr	r0, [pc, #736]	; (8001208 <display7SEG_hor+0x308>)
 8000f28:	f001 f813 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2108      	movs	r1, #8
 8000f30:	48b5      	ldr	r0, [pc, #724]	; (8001208 <display7SEG_hor+0x308>)
 8000f32:	f001 f80e 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2110      	movs	r1, #16
 8000f3a:	48b3      	ldr	r0, [pc, #716]	; (8001208 <display7SEG_hor+0x308>)
 8000f3c:	f001 f809 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2120      	movs	r1, #32
 8000f44:	48b0      	ldr	r0, [pc, #704]	; (8001208 <display7SEG_hor+0x308>)
 8000f46:	f001 f804 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	48ae      	ldr	r0, [pc, #696]	; (8001208 <display7SEG_hor+0x308>)
 8000f50:	f000 ffff 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 1) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d122      	bne.n	8000fa0 <display7SEG_hor+0xa0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	48aa      	ldr	r0, [pc, #680]	; (8001208 <display7SEG_hor+0x308>)
 8000f60:	f000 fff7 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2102      	movs	r1, #2
 8000f68:	48a7      	ldr	r0, [pc, #668]	; (8001208 <display7SEG_hor+0x308>)
 8000f6a:	f000 fff2 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2104      	movs	r1, #4
 8000f72:	48a5      	ldr	r0, [pc, #660]	; (8001208 <display7SEG_hor+0x308>)
 8000f74:	f000 ffed 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	48a2      	ldr	r0, [pc, #648]	; (8001208 <display7SEG_hor+0x308>)
 8000f7e:	f000 ffe8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2110      	movs	r1, #16
 8000f86:	48a0      	ldr	r0, [pc, #640]	; (8001208 <display7SEG_hor+0x308>)
 8000f88:	f000 ffe3 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	489d      	ldr	r0, [pc, #628]	; (8001208 <display7SEG_hor+0x308>)
 8000f92:	f000 ffde 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	489b      	ldr	r0, [pc, #620]	; (8001208 <display7SEG_hor+0x308>)
 8000f9c:	f000 ffd9 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 2) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d122      	bne.n	8000fec <display7SEG_hor+0xec>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4897      	ldr	r0, [pc, #604]	; (8001208 <display7SEG_hor+0x308>)
 8000fac:	f000 ffd1 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4894      	ldr	r0, [pc, #592]	; (8001208 <display7SEG_hor+0x308>)
 8000fb6:	f000 ffcc 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4892      	ldr	r0, [pc, #584]	; (8001208 <display7SEG_hor+0x308>)
 8000fc0:	f000 ffc7 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	488f      	ldr	r0, [pc, #572]	; (8001208 <display7SEG_hor+0x308>)
 8000fca:	f000 ffc2 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	488d      	ldr	r0, [pc, #564]	; (8001208 <display7SEG_hor+0x308>)
 8000fd4:	f000 ffbd 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	488a      	ldr	r0, [pc, #552]	; (8001208 <display7SEG_hor+0x308>)
 8000fde:	f000 ffb8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	4888      	ldr	r0, [pc, #544]	; (8001208 <display7SEG_hor+0x308>)
 8000fe8:	f000 ffb3 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 3) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d122      	bne.n	8001038 <display7SEG_hor+0x138>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4884      	ldr	r0, [pc, #528]	; (8001208 <display7SEG_hor+0x308>)
 8000ff8:	f000 ffab 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2102      	movs	r1, #2
 8001000:	4881      	ldr	r0, [pc, #516]	; (8001208 <display7SEG_hor+0x308>)
 8001002:	f000 ffa6 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2104      	movs	r1, #4
 800100a:	487f      	ldr	r0, [pc, #508]	; (8001208 <display7SEG_hor+0x308>)
 800100c:	f000 ffa1 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2108      	movs	r1, #8
 8001014:	487c      	ldr	r0, [pc, #496]	; (8001208 <display7SEG_hor+0x308>)
 8001016:	f000 ff9c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2110      	movs	r1, #16
 800101e:	487a      	ldr	r0, [pc, #488]	; (8001208 <display7SEG_hor+0x308>)
 8001020:	f000 ff97 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2120      	movs	r1, #32
 8001028:	4877      	ldr	r0, [pc, #476]	; (8001208 <display7SEG_hor+0x308>)
 800102a:	f000 ff92 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2140      	movs	r1, #64	; 0x40
 8001032:	4875      	ldr	r0, [pc, #468]	; (8001208 <display7SEG_hor+0x308>)
 8001034:	f000 ff8d 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 4) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d122      	bne.n	8001084 <display7SEG_hor+0x184>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2101      	movs	r1, #1
 8001042:	4871      	ldr	r0, [pc, #452]	; (8001208 <display7SEG_hor+0x308>)
 8001044:	f000 ff85 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2102      	movs	r1, #2
 800104c:	486e      	ldr	r0, [pc, #440]	; (8001208 <display7SEG_hor+0x308>)
 800104e:	f000 ff80 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2104      	movs	r1, #4
 8001056:	486c      	ldr	r0, [pc, #432]	; (8001208 <display7SEG_hor+0x308>)
 8001058:	f000 ff7b 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2108      	movs	r1, #8
 8001060:	4869      	ldr	r0, [pc, #420]	; (8001208 <display7SEG_hor+0x308>)
 8001062:	f000 ff76 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	4867      	ldr	r0, [pc, #412]	; (8001208 <display7SEG_hor+0x308>)
 800106c:	f000 ff71 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	4864      	ldr	r0, [pc, #400]	; (8001208 <display7SEG_hor+0x308>)
 8001076:	f000 ff6c 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	4862      	ldr	r0, [pc, #392]	; (8001208 <display7SEG_hor+0x308>)
 8001080:	f000 ff67 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 5) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b05      	cmp	r3, #5
 8001088:	d122      	bne.n	80010d0 <display7SEG_hor+0x1d0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	2101      	movs	r1, #1
 800108e:	485e      	ldr	r0, [pc, #376]	; (8001208 <display7SEG_hor+0x308>)
 8001090:	f000 ff5f 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2102      	movs	r1, #2
 8001098:	485b      	ldr	r0, [pc, #364]	; (8001208 <display7SEG_hor+0x308>)
 800109a:	f000 ff5a 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2104      	movs	r1, #4
 80010a2:	4859      	ldr	r0, [pc, #356]	; (8001208 <display7SEG_hor+0x308>)
 80010a4:	f000 ff55 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	4856      	ldr	r0, [pc, #344]	; (8001208 <display7SEG_hor+0x308>)
 80010ae:	f000 ff50 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2110      	movs	r1, #16
 80010b6:	4854      	ldr	r0, [pc, #336]	; (8001208 <display7SEG_hor+0x308>)
 80010b8:	f000 ff4b 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2120      	movs	r1, #32
 80010c0:	4851      	ldr	r0, [pc, #324]	; (8001208 <display7SEG_hor+0x308>)
 80010c2:	f000 ff46 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	484f      	ldr	r0, [pc, #316]	; (8001208 <display7SEG_hor+0x308>)
 80010cc:	f000 ff41 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 6) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d122      	bne.n	800111c <display7SEG_hor+0x21c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	484b      	ldr	r0, [pc, #300]	; (8001208 <display7SEG_hor+0x308>)
 80010dc:	f000 ff39 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2102      	movs	r1, #2
 80010e4:	4848      	ldr	r0, [pc, #288]	; (8001208 <display7SEG_hor+0x308>)
 80010e6:	f000 ff34 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2104      	movs	r1, #4
 80010ee:	4846      	ldr	r0, [pc, #280]	; (8001208 <display7SEG_hor+0x308>)
 80010f0:	f000 ff2f 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2108      	movs	r1, #8
 80010f8:	4843      	ldr	r0, [pc, #268]	; (8001208 <display7SEG_hor+0x308>)
 80010fa:	f000 ff2a 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2110      	movs	r1, #16
 8001102:	4841      	ldr	r0, [pc, #260]	; (8001208 <display7SEG_hor+0x308>)
 8001104:	f000 ff25 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	483e      	ldr	r0, [pc, #248]	; (8001208 <display7SEG_hor+0x308>)
 800110e:	f000 ff20 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2140      	movs	r1, #64	; 0x40
 8001116:	483c      	ldr	r0, [pc, #240]	; (8001208 <display7SEG_hor+0x308>)
 8001118:	f000 ff1b 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 7) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b07      	cmp	r3, #7
 8001120:	d122      	bne.n	8001168 <display7SEG_hor+0x268>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2101      	movs	r1, #1
 8001126:	4838      	ldr	r0, [pc, #224]	; (8001208 <display7SEG_hor+0x308>)
 8001128:	f000 ff13 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2102      	movs	r1, #2
 8001130:	4835      	ldr	r0, [pc, #212]	; (8001208 <display7SEG_hor+0x308>)
 8001132:	f000 ff0e 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2104      	movs	r1, #4
 800113a:	4833      	ldr	r0, [pc, #204]	; (8001208 <display7SEG_hor+0x308>)
 800113c:	f000 ff09 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2108      	movs	r1, #8
 8001144:	4830      	ldr	r0, [pc, #192]	; (8001208 <display7SEG_hor+0x308>)
 8001146:	f000 ff04 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	482e      	ldr	r0, [pc, #184]	; (8001208 <display7SEG_hor+0x308>)
 8001150:	f000 feff 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2120      	movs	r1, #32
 8001158:	482b      	ldr	r0, [pc, #172]	; (8001208 <display7SEG_hor+0x308>)
 800115a:	f000 fefa 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4829      	ldr	r0, [pc, #164]	; (8001208 <display7SEG_hor+0x308>)
 8001164:	f000 fef5 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 8) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b08      	cmp	r3, #8
 800116c:	d122      	bne.n	80011b4 <display7SEG_hor+0x2b4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2101      	movs	r1, #1
 8001172:	4825      	ldr	r0, [pc, #148]	; (8001208 <display7SEG_hor+0x308>)
 8001174:	f000 feed 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2102      	movs	r1, #2
 800117c:	4822      	ldr	r0, [pc, #136]	; (8001208 <display7SEG_hor+0x308>)
 800117e:	f000 fee8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2104      	movs	r1, #4
 8001186:	4820      	ldr	r0, [pc, #128]	; (8001208 <display7SEG_hor+0x308>)
 8001188:	f000 fee3 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2108      	movs	r1, #8
 8001190:	481d      	ldr	r0, [pc, #116]	; (8001208 <display7SEG_hor+0x308>)
 8001192:	f000 fede 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <display7SEG_hor+0x308>)
 800119c:	f000 fed9 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <display7SEG_hor+0x308>)
 80011a6:	f000 fed4 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <display7SEG_hor+0x308>)
 80011b0:	f000 fecf 	bl	8001f52 <HAL_GPIO_WritePin>
	}

	if (num == 9) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d122      	bne.n	8001200 <display7SEG_hor+0x300>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2101      	movs	r1, #1
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <display7SEG_hor+0x308>)
 80011c0:	f000 fec7 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2102      	movs	r1, #2
 80011c8:	480f      	ldr	r0, [pc, #60]	; (8001208 <display7SEG_hor+0x308>)
 80011ca:	f000 fec2 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2104      	movs	r1, #4
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <display7SEG_hor+0x308>)
 80011d4:	f000 febd 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2108      	movs	r1, #8
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <display7SEG_hor+0x308>)
 80011de:	f000 feb8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <display7SEG_hor+0x308>)
 80011e8:	f000 feb3 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2120      	movs	r1, #32
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <display7SEG_hor+0x308>)
 80011f2:	f000 feae 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <display7SEG_hor+0x308>)
 80011fc:	f000 fea9 	bl	8001f52 <HAL_GPIO_WritePin>
	}
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <update_7SEG_ver>:

void update_7SEG_ver(int idx_vertical) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	switch (idx_vertical) {
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <update_7SEG_ver+0x16>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d011      	beq.n	8001244 <update_7SEG_ver+0x38>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
			display7SEG_ver(led_buffer_ver[1]);
			break;
	}
}
 8001220:	e021      	b.n	8001266 <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <update_7SEG_ver+0x64>)
 8001228:	f000 fe93 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	480f      	ldr	r0, [pc, #60]	; (8001270 <update_7SEG_ver+0x64>)
 8001234:	f000 fe8d 	bl	8001f52 <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[0]);
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <update_7SEG_ver+0x68>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fc8f 	bl	8000b60 <display7SEG_ver>
			break;
 8001242:	e010      	b.n	8001266 <update_7SEG_ver+0x5a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <update_7SEG_ver+0x64>)
 800124a:	f000 fe82 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <update_7SEG_ver+0x64>)
 8001256:	f000 fe7c 	bl	8001f52 <HAL_GPIO_WritePin>
			display7SEG_ver(led_buffer_ver[1]);
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <update_7SEG_ver+0x68>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc7e 	bl	8000b60 <display7SEG_ver>
			break;
 8001264:	bf00      	nop
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40010c00 	.word	0x40010c00
 8001274:	2000012c 	.word	0x2000012c

08001278 <update_7SEG_hor>:

void update_7SEG_hor(int idx_horizontal) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	switch (idx_horizontal) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <update_7SEG_hor+0x16>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d012      	beq.n	80012b2 <update_7SEG_hor+0x3a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
			display7SEG_hor(led_buffer_hor[1]);
			break;
	}
}
 800128c:	e023      	b.n	80012d6 <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <update_7SEG_hor+0x68>)
 8001296:	f000 fe5c 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <update_7SEG_hor+0x68>)
 80012a2:	f000 fe56 	bl	8001f52 <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[0]);
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <update_7SEG_hor+0x6c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe28 	bl	8000f00 <display7SEG_hor>
			break;
 80012b0:	e011      	b.n	80012d6 <update_7SEG_hor+0x5e>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <update_7SEG_hor+0x68>)
 80012ba:	f000 fe4a 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c4:	4806      	ldr	r0, [pc, #24]	; (80012e0 <update_7SEG_hor+0x68>)
 80012c6:	f000 fe44 	bl	8001f52 <HAL_GPIO_WritePin>
			display7SEG_hor(led_buffer_hor[1]);
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <update_7SEG_hor+0x6c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe16 	bl	8000f00 <display7SEG_hor>
			break;
 80012d4:	bf00      	nop
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	20000134 	.word	0x20000134

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f000 fb30 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f82a 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80012f4:	f000 f864 	bl	80013c0 <MX_TIM2_Init>
  MX_GPIO_Init();
 80012f8:	f000 f8ae 	bl	8001458 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <main+0x54>)
 80012fe:	f001 fa85 	bl	800280c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(2, 20);		// hiển thị 7SEG
 8001302:	2114      	movs	r1, #20
 8001304:	2002      	movs	r0, #2
 8001306:	f000 f91d 	bl	8001544 <setTimer>
  setTimer(4, 250); 	// nhấp nháy đèn khi modify time duration tần số 2Hz
 800130a:	21fa      	movs	r1, #250	; 0xfa
 800130c:	2004      	movs	r0, #4
 800130e:	f000 f919 	bl	8001544 <setTimer>
  setTimer(9, 1000); 	// check setTimer
 8001312:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001316:	2009      	movs	r0, #9
 8001318:	f000 f914 	bl	8001544 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer_flag[9] == 1) {
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <main+0x58>)
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	d108      	bne.n	8001336 <main+0x4e>
		  setTimer(9, 1000);
 8001324:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001328:	2009      	movs	r0, #9
 800132a:	f000 f90b 	bl	8001544 <setTimer>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800132e:	2120      	movs	r1, #32
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <main+0x5c>)
 8001332:	f000 fe26 	bl	8001f82 <HAL_GPIO_TogglePin>
	  }

	  fsm_manual();
 8001336:	f7ff fa27 	bl	8000788 <fsm_manual>
	  if (timer_flag[9] == 1) {
 800133a:	e7ef      	b.n	800131c <main+0x34>
 800133c:	2000018c 	.word	0x2000018c
 8001340:	200001d4 	.word	0x200001d4
 8001344:	40010800 	.word	0x40010800

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fe08 	bl	8002f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001372:	2310      	movs	r3, #16
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fe18 	bl	8001fb4 <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800138a:	f000 f8d5 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f884 	bl	80024b4 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f8c1 	bl	8001538 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3740      	adds	r7, #64	; 0x40
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_TIM2_Init+0x94>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_TIM2_Init+0x94>)
 80013e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM2_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_TIM2_Init+0x94>)
 80013f4:	2209      	movs	r2, #9
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_TIM2_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM2_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_TIM2_Init+0x94>)
 8001406:	f001 f9b1 	bl	800276c <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001410:	f000 f892 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_TIM2_Init+0x94>)
 8001422:	f001 fb2f 	bl	8002a84 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 f884 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_TIM2_Init+0x94>)
 800143e:	f001 fd07 	bl	8002e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 f876 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000018c 	.word	0x2000018c

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b29      	ldr	r3, [pc, #164]	; (8001514 <MX_GPIO_Init+0xbc>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <MX_GPIO_Init+0xbc>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <MX_GPIO_Init+0xbc>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <MX_GPIO_Init+0xbc>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a22      	ldr	r2, [pc, #136]	; (8001514 <MX_GPIO_Init+0xbc>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <MX_GPIO_Init+0xbc>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800149c:	2200      	movs	r2, #0
 800149e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80014a2:	481d      	ldr	r0, [pc, #116]	; (8001518 <MX_GPIO_Init+0xc0>)
 80014a4:	f000 fd55 	bl	8001f52 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80014a8:	2200      	movs	r2, #0
 80014aa:	f241 31ff 	movw	r1, #5119	; 0x13ff
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <MX_GPIO_Init+0xc4>)
 80014b0:	f000 fd4f 	bl	8001f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80014b4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80014b8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	4812      	ldr	r0, [pc, #72]	; (8001518 <MX_GPIO_Init+0xc0>)
 80014ce:	f000 fbaf 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80014d2:	f241 33ff 	movw	r3, #5119	; 0x13ff
 80014d6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2302      	movs	r3, #2
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_GPIO_Init+0xc4>)
 80014ec:	f000 fba0 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_GPIO_Init+0xc4>)
 8001506:	f000 fb93 	bl	8001c30 <HAL_GPIO_Init>

}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00

08001520 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	timerRun();
 8001528:	f000 f82c 	bl	8001584 <timerRun>
	getKeyInput();
 800152c:	f7fe fe28 	bl	8000180 <getKeyInput>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <setTimer>:
#include"software_timer.h"

int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <setTimer+0x34>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2100      	movs	r1, #0
 8001554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter / TICK;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <setTimer+0x38>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1092      	asrs	r2, r2, #2
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	4906      	ldr	r1, [pc, #24]	; (8001580 <setTimer+0x3c>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200001d4 	.word	0x200001d4
 800157c:	66666667 	.word	0x66666667
 8001580:	2000013c 	.word	0x2000013c

08001584 <timerRun>:

void timerRun() {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	e01c      	b.n	80015ca <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <timerRun+0x58>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dd13      	ble.n	80015c4 <timerRun+0x40>
			timer_counter[i]--;
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <timerRun+0x58>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <timerRun+0x58>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <timerRun+0x58>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dc04      	bgt.n	80015c4 <timerRun+0x40>
				timer_flag[i] = 1;
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <timerRun+0x5c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2101      	movs	r1, #1
 80015c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	dddf      	ble.n	8001590 <timerRun+0xc>
			}
		}
	}
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	2000013c 	.word	0x2000013c
 80015e0:	200001d4 	.word	0x200001d4

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_MspInit+0x5c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6193      	str	r3, [r2, #24]
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_MspInit+0x5c>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_MspInit+0x60>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_MspInit+0x60>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000

08001648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001658:	d113      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_TIM_Base_MspInit+0x44>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_TIM_Base_MspInit+0x44>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <HAL_TIM_Base_MspInit+0x44>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	201c      	movs	r0, #28
 8001678:	f000 faa3 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800167c:	201c      	movs	r0, #28
 800167e:	f000 fabc 	bl	8001bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <NMI_Handler+0x4>

08001696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <MemManage_Handler+0x4>

080016a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <UsageFault_Handler+0x4>

080016ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d6:	f000 f981 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM2_IRQHandler+0x10>)
 80016e6:	f001 f8dd 	bl	80028a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000018c 	.word	0x2000018c

080016f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <red_led_ver>:
 *      Author: ACER
 */
#include "traffic_light.h"

//đèn giao thông cho chiều dọc
void red_led_ver() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2104      	movs	r1, #4
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <red_led_ver+0x28>)
 800170a:	f000 fc22 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2108      	movs	r1, #8
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <red_led_ver+0x28>)
 8001714:	f000 fc1d 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2110      	movs	r1, #16
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <red_led_ver+0x28>)
 800171e:	f000 fc18 	bl	8001f52 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40010800 	.word	0x40010800

0800172c <yellow_led_ver>:

void yellow_led_ver() {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2104      	movs	r1, #4
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <yellow_led_ver+0x28>)
 8001736:	f000 fc0c 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2108      	movs	r1, #8
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <yellow_led_ver+0x28>)
 8001740:	f000 fc07 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2110      	movs	r1, #16
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <yellow_led_ver+0x28>)
 800174a:	f000 fc02 	bl	8001f52 <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010800 	.word	0x40010800

08001758 <green_led_ver>:

void green_led_ver() {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2104      	movs	r1, #4
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <green_led_ver+0x28>)
 8001762:	f000 fbf6 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2108      	movs	r1, #8
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <green_led_ver+0x28>)
 800176c:	f000 fbf1 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <green_led_ver+0x28>)
 8001776:	f000 fbec 	bl	8001f52 <HAL_GPIO_WritePin>
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40010800 	.word	0x40010800

08001784 <red_led_hor>:

//********************************************************************
//đèn giao thông cho chiều ngang
void red_led_hor() {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2140      	movs	r1, #64	; 0x40
 800178c:	4807      	ldr	r0, [pc, #28]	; (80017ac <red_led_hor+0x28>)
 800178e:	f000 fbe0 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <red_led_hor+0x28>)
 8001798:	f000 fbdb 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <red_led_hor+0x28>)
 80017a4:	f000 fbd5 	bl	8001f52 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010800 	.word	0x40010800

080017b0 <yellow_led_hor>:

void yellow_led_hor() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2140      	movs	r1, #64	; 0x40
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <yellow_led_hor+0x28>)
 80017ba:	f000 fbca 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <yellow_led_hor+0x28>)
 80017c4:	f000 fbc5 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ce:	4802      	ldr	r0, [pc, #8]	; (80017d8 <yellow_led_hor+0x28>)
 80017d0:	f000 fbbf 	bl	8001f52 <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010800 	.word	0x40010800

080017dc <green_led_hor>:

void green_led_hor() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2140      	movs	r1, #64	; 0x40
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <green_led_hor+0x28>)
 80017e6:	f000 fbb4 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <green_led_hor+0x28>)
 80017f0:	f000 fbaf 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fa:	4802      	ldr	r0, [pc, #8]	; (8001804 <green_led_hor+0x28>)
 80017fc:	f000 fba9 	bl	8001f52 <HAL_GPIO_WritePin>
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010800 	.word	0x40010800

08001808 <toggle_red_led>:

//**********************************************************************
//nhấp nháy đèn cần modify và tắt các đèn không modify
void toggle_red_led() {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800180c:	2104      	movs	r1, #4
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <toggle_red_led+0x18>)
 8001810:	f000 fbb7 	bl	8001f82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001814:	2140      	movs	r1, #64	; 0x40
 8001816:	4802      	ldr	r0, [pc, #8]	; (8001820 <toggle_red_led+0x18>)
 8001818:	f000 fbb3 	bl	8001f82 <HAL_GPIO_TogglePin>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40010800 	.word	0x40010800

08001824 <toggle_yellow_led>:

void toggle_yellow_led() {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001828:	2108      	movs	r1, #8
 800182a:	4804      	ldr	r0, [pc, #16]	; (800183c <toggle_yellow_led+0x18>)
 800182c:	f000 fba9 	bl	8001f82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	4802      	ldr	r0, [pc, #8]	; (800183c <toggle_yellow_led+0x18>)
 8001834:	f000 fba5 	bl	8001f82 <HAL_GPIO_TogglePin>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40010800 	.word	0x40010800

08001840 <toggle_green_led>:

void toggle_green_led() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001844:	2110      	movs	r1, #16
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <toggle_green_led+0x1c>)
 8001848:	f000 fb9b 	bl	8001f82 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800184c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <toggle_green_led+0x1c>)
 8001852:	f000 fb96 	bl	8001f82 <HAL_GPIO_TogglePin>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40010800 	.word	0x40010800

08001860 <turn_off_yellow_green>:

//**********************************************************************
//tắt các đèn không cần modify
void turn_off_yellow_green() {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2108      	movs	r1, #8
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <turn_off_yellow_green+0x34>)
 800186a:	f000 fb72 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2110      	movs	r1, #16
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <turn_off_yellow_green+0x34>)
 8001874:	f000 fb6d 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2180      	movs	r1, #128	; 0x80
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <turn_off_yellow_green+0x34>)
 800187e:	f000 fb68 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <turn_off_yellow_green+0x34>)
 800188a:	f000 fb62 	bl	8001f52 <HAL_GPIO_WritePin>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40010800 	.word	0x40010800

08001898 <turn_off_red_green>:

void turn_off_red_green() {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2104      	movs	r1, #4
 80018a0:	480a      	ldr	r0, [pc, #40]	; (80018cc <turn_off_red_green+0x34>)
 80018a2:	f000 fb56 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2110      	movs	r1, #16
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <turn_off_red_green+0x34>)
 80018ac:	f000 fb51 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2140      	movs	r1, #64	; 0x40
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <turn_off_red_green+0x34>)
 80018b6:	f000 fb4c 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <turn_off_red_green+0x34>)
 80018c2:	f000 fb46 	bl	8001f52 <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40010800 	.word	0x40010800

080018d0 <turn_off_red_yellow>:

void turn_off_red_yellow() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2104      	movs	r1, #4
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <turn_off_red_yellow+0x30>)
 80018da:	f000 fb3a 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2108      	movs	r1, #8
 80018e2:	4807      	ldr	r0, [pc, #28]	; (8001900 <turn_off_red_yellow+0x30>)
 80018e4:	f000 fb35 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <turn_off_red_yellow+0x30>)
 80018ee:	f000 fb30 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <turn_off_red_yellow+0x30>)
 80018f8:	f000 fb2b 	bl	8001f52 <HAL_GPIO_WritePin>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40010800 	.word	0x40010800

08001904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001904:	f7ff fef6 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190a:	490c      	ldr	r1, [pc, #48]	; (800193c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001920:	4c09      	ldr	r4, [pc, #36]	; (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f001 faf9 	bl	8002f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff fcd9 	bl	80012e8 <main>
  bx lr
 8001936:	4770      	bx	lr
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001940:	08002fc0 	.word	0x08002fc0
  ldr r2, =_sbss
 8001944:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001948:	20000200 	.word	0x20000200

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_Init+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_Init+0x28>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f923 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fe3a 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f93b 	bl	8001c16 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 f903 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000e4 	.word	0x200000e4
 80019d4:	200000ec 	.word	0x200000ec
 80019d8:	200000e8 	.word	0x200000e8

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	200000ec 	.word	0x200000ec
 80019fc:	200001fc 	.word	0x200001fc

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	200001fc 	.word	0x200001fc

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <__NVIC_EnableIRQ+0x34>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff90 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff2d 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff42 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff35 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b08b      	sub	sp, #44	; 0x2c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	e148      	b.n	8001ed6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c44:	2201      	movs	r2, #1
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8137 	bne.w	8001ed0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4aa3      	ldr	r2, [pc, #652]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d05e      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c6c:	4aa1      	ldr	r2, [pc, #644]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d875      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c72:	4aa1      	ldr	r2, [pc, #644]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d058      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c78:	4a9f      	ldr	r2, [pc, #636]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d86f      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c7e:	4a9f      	ldr	r2, [pc, #636]	; (8001efc <HAL_GPIO_Init+0x2cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d052      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c84:	4a9d      	ldr	r2, [pc, #628]	; (8001efc <HAL_GPIO_Init+0x2cc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d869      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c8a:	4a9d      	ldr	r2, [pc, #628]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04c      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c90:	4a9b      	ldr	r2, [pc, #620]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d863      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001c96:	4a9b      	ldr	r2, [pc, #620]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d046      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
 8001c9c:	4a99      	ldr	r2, [pc, #612]	; (8001f04 <HAL_GPIO_Init+0x2d4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d85d      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d82a      	bhi.n	8001cfc <HAL_GPIO_Init+0xcc>
 8001ca6:	2b12      	cmp	r3, #18
 8001ca8:	d859      	bhi.n	8001d5e <HAL_GPIO_Init+0x12e>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <HAL_GPIO_Init+0x80>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d05 	.word	0x08001d05
 8001cb8:	08001d17 	.word	0x08001d17
 8001cbc:	08001d59 	.word	0x08001d59
 8001cc0:	08001d5f 	.word	0x08001d5f
 8001cc4:	08001d5f 	.word	0x08001d5f
 8001cc8:	08001d5f 	.word	0x08001d5f
 8001ccc:	08001d5f 	.word	0x08001d5f
 8001cd0:	08001d5f 	.word	0x08001d5f
 8001cd4:	08001d5f 	.word	0x08001d5f
 8001cd8:	08001d5f 	.word	0x08001d5f
 8001cdc:	08001d5f 	.word	0x08001d5f
 8001ce0:	08001d5f 	.word	0x08001d5f
 8001ce4:	08001d5f 	.word	0x08001d5f
 8001ce8:	08001d5f 	.word	0x08001d5f
 8001cec:	08001d5f 	.word	0x08001d5f
 8001cf0:	08001d5f 	.word	0x08001d5f
 8001cf4:	08001d0d 	.word	0x08001d0d
 8001cf8:	08001d21 	.word	0x08001d21
 8001cfc:	4a82      	ldr	r2, [pc, #520]	; (8001f08 <HAL_GPIO_Init+0x2d8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d02:	e02c      	b.n	8001d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	623b      	str	r3, [r7, #32]
          break;
 8001d0a:	e029      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	3304      	adds	r3, #4
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e024      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e01f      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	330c      	adds	r3, #12
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e01a      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d32:	2304      	movs	r3, #4
 8001d34:	623b      	str	r3, [r7, #32]
          break;
 8001d36:	e013      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d40:	2308      	movs	r3, #8
 8001d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	611a      	str	r2, [r3, #16]
          break;
 8001d4a:	e009      	b.n	8001d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	615a      	str	r2, [r3, #20]
          break;
 8001d56:	e003      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
          break;
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x130>
          break;
 8001d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2bff      	cmp	r3, #255	; 0xff
 8001d64:	d801      	bhi.n	8001d6a <HAL_GPIO_Init+0x13a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_Init+0x13e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d802      	bhi.n	8001d7c <HAL_GPIO_Init+0x14c>
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x152>
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3b08      	subs	r3, #8
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	210f      	movs	r1, #15
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8090 	beq.w	8001ed0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001db0:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x2dc>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a55      	ldr	r2, [pc, #340]	; (8001f0c <HAL_GPIO_Init+0x2dc>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6193      	str	r3, [r2, #24]
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_GPIO_Init+0x2dc>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x2e0>)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x2e4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00d      	beq.n	8001e10 <HAL_GPIO_Init+0x1e0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_GPIO_Init+0x2e8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d007      	beq.n	8001e0c <HAL_GPIO_Init+0x1dc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_GPIO_Init+0x2ec>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_GPIO_Init+0x1d8>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e004      	b.n	8001e12 <HAL_GPIO_Init+0x1e2>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x1e2>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_GPIO_Init+0x1e2>
 8001e10:	2300      	movs	r3, #0
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	f002 0203 	and.w	r2, r2, #3
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	4093      	lsls	r3, r2
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e22:	493b      	ldr	r1, [pc, #236]	; (8001f10 <HAL_GPIO_Init+0x2e0>)
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4937      	ldr	r1, [pc, #220]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4a:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4933      	ldr	r1, [pc, #204]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	492d      	ldr	r1, [pc, #180]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e72:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4929      	ldr	r1, [pc, #164]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4923      	ldr	r1, [pc, #140]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9a:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	491f      	ldr	r1, [pc, #124]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d006      	beq.n	8001ec2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4919      	ldr	r1, [pc, #100]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	4915      	ldr	r1, [pc, #84]	; (8001f20 <HAL_GPIO_Init+0x2f0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f aeaf 	bne.w	8001c44 <HAL_GPIO_Init+0x14>
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	bf00      	nop
 8001eea:	372c      	adds	r7, #44	; 0x2c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40010400 	.word	0x40010400

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f62:	787b      	ldrb	r3, [r7, #1]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f94:	887a      	ldrh	r2, [r7, #2]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	041a      	lsls	r2, r3, #16
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e26c      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8087 	beq.w	80020e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd4:	4b92      	ldr	r3, [pc, #584]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d00c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d112      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d10b      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d06c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x12c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d168      	bne.n	80020e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e246      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x76>
 800201c:	4b80      	ldr	r3, [pc, #512]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a7f      	ldr	r2, [pc, #508]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e02e      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x98>
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0xbc>
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a71      	ldr	r2, [pc, #452]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6e      	ldr	r2, [pc, #440]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xd4>
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6a      	ldr	r2, [pc, #424]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a67      	ldr	r2, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fcb6 	bl	8001a00 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff fcb2 	bl	8001a00 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1fa      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xe4>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fca2 	bl	8001a00 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff fc9e 	bl	8001a00 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1e6      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x10c>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d063      	beq.n	80021b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ee:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020fa:	4b49      	ldr	r3, [pc, #292]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b08      	cmp	r3, #8
 8002104:	d11c      	bne.n	8002140 <HAL_RCC_OscConfig+0x18c>
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d116      	bne.n	8002140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x176>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e1ba      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4939      	ldr	r1, [pc, #228]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	e03a      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_OscConfig+0x270>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff fc57 	bl	8001a00 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002156:	f7ff fc53 	bl	8001a00 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e19b      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4927      	ldr	r1, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x270>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fc36 	bl	8001a00 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002198:	f7ff fc32 	bl	8001a00 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e17a      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d03a      	beq.n	8002238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d019      	beq.n	80021fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x274>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff fc16 	bl	8001a00 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff fc12 	bl	8001a00 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e15a      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f000 fa9a 	bl	8002730 <RCC_Delay>
 80021fc:	e01c      	b.n	8002238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_OscConfig+0x274>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7ff fbfc 	bl	8001a00 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220a:	e00f      	b.n	800222c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fbf8 	bl	8001a00 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d908      	bls.n	800222c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e140      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	42420000 	.word	0x42420000
 8002228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e9      	bne.n	800220c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a6 	beq.w	8002392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224a:	4b97      	ldr	r3, [pc, #604]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10d      	bne.n	8002272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	4b94      	ldr	r3, [pc, #592]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a93      	ldr	r2, [pc, #588]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
 8002262:	4b91      	ldr	r3, [pc, #580]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226e:	2301      	movs	r3, #1
 8002270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_RCC_OscConfig+0x4f8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d118      	bne.n	80022b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227e:	4b8b      	ldr	r3, [pc, #556]	; (80024ac <HAL_RCC_OscConfig+0x4f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a8a      	ldr	r2, [pc, #552]	; (80024ac <HAL_RCC_OscConfig+0x4f8>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228a:	f7ff fbb9 	bl	8001a00 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002292:	f7ff fbb5 	bl	8001a00 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b64      	cmp	r3, #100	; 0x64
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0fd      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x312>
 80022b8:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a7a      	ldr	r2, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	e02d      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x334>
 80022ce:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a75      	ldr	r2, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a72      	ldr	r2, [pc, #456]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	e01c      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0x356>
 80022f0:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	f043 0304 	orr.w	r3, r3, #4
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a69      	ldr	r2, [pc, #420]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0x36e>
 800230a:	4b67      	ldr	r3, [pc, #412]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a66      	ldr	r2, [pc, #408]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6213      	str	r3, [r2, #32]
 8002316:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	f023 0304 	bic.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d015      	beq.n	8002356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7ff fb69 	bl	8001a00 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff fb65 	bl	8001a00 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e0ab      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ee      	beq.n	8002332 <HAL_RCC_OscConfig+0x37e>
 8002354:	e014      	b.n	8002380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7ff fb53 	bl	8001a00 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff fb4f 	bl	8001a00 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e095      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ee      	bne.n	800235e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d105      	bne.n	8002392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a47      	ldr	r2, [pc, #284]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8081 	beq.w	800249e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800239c:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d061      	beq.n	800246c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d146      	bne.n	800243e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <HAL_RCC_OscConfig+0x4fc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb23 	bl	8001a00 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff fb1f 	bl	8001a00 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e067      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e4:	d108      	bne.n	80023f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	492d      	ldr	r1, [pc, #180]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a19      	ldr	r1, [r3, #32]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	430b      	orrs	r3, r1
 800240a:	4927      	ldr	r1, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x4fc>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff faf3 	bl	8001a00 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff faef 	bl	8001a00 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e037      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x46a>
 800243c:	e02f      	b.n	800249e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <HAL_RCC_OscConfig+0x4fc>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff fadc 	bl	8001a00 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff fad8 	bl	8001a00 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e020      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x498>
 800246a:	e018      	b.n	800249e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e013      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42420060 	.word	0x42420060

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff fa2c 	bl	8001a00 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7ff fa28 	bl	8001a00 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1cc>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f98a 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	08002f94 	.word	0x08002f94
 8002680:	200000e4 	.word	0x200000e4
 8002684:	200000e8 	.word	0x200000e8

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_GetSysClockFreq+0x94>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x30>
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x36>
 80026b6:	e027      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ba:	613b      	str	r3, [r7, #16]
      break;
 80026bc:	e027      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	0c9b      	lsrs	r3, r3, #18
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_RCC_GetSysClockFreq+0x94>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0c5b      	lsrs	r3, r3, #17
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ea:	fb02 f203 	mul.w	r2, r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e004      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a0c      	ldr	r2, [pc, #48]	; (800272c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	613b      	str	r3, [r7, #16]
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetSysClockFreq+0x98>)
 800270a:	613b      	str	r3, [r7, #16]
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	693b      	ldr	r3, [r7, #16]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	08002fa4 	.word	0x08002fa4
 8002728:	08002fb4 	.word	0x08002fb4
 800272c:	003d0900 	.word	0x003d0900

08002730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <RCC_Delay+0x34>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <RCC_Delay+0x38>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0a5b      	lsrs	r3, r3, #9
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800274c:	bf00      	nop
  }
  while (Delay --);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	60fa      	str	r2, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <RCC_Delay+0x1c>
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	200000e4 	.word	0x200000e4
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e041      	b.n	8002802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fe ff58 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2202      	movs	r2, #2
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f000 fa56 	bl	8002c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d001      	beq.n	8002824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e035      	b.n	8002890 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_TIM_Base_Start_IT+0x90>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIM_Base_Start_IT+0x4e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d004      	beq.n	800285a <HAL_TIM_Base_Start_IT+0x4e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a12      	ldr	r2, [pc, #72]	; (80028a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d010      	beq.n	800288e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	e007      	b.n	800288e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400

080028a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0202 	mvn.w	r2, #2
 80028d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f998 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f98b 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f99a 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d020      	beq.n	8002954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0204 	mvn.w	r2, #4
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f972 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f965 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f974 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0208 	mvn.w	r2, #8
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f94c 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f93f 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f94e 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d020      	beq.n	80029ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0210 	mvn.w	r2, #16
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2208      	movs	r2, #8
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f926 	bl	8002c24 <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f919 	bl	8002c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f928 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0201 	mvn.w	r2, #1
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe fd88 	bl	8001520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa6f 	bl	8002f12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8f8 	bl	8002c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0320 	and.w	r3, r3, #32
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0220 	mvn.w	r2, #32
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa42 	bl	8002f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIM_ConfigClockSource+0x1c>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0b4      	b.n	8002c0a <HAL_TIM_ConfigClockSource+0x186>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad8:	d03e      	beq.n	8002b58 <HAL_TIM_ConfigClockSource+0xd4>
 8002ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ade:	f200 8087 	bhi.w	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae6:	f000 8086 	beq.w	8002bf6 <HAL_TIM_ConfigClockSource+0x172>
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	d87f      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b70      	cmp	r3, #112	; 0x70
 8002af2:	d01a      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0xa6>
 8002af4:	2b70      	cmp	r3, #112	; 0x70
 8002af6:	d87b      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b60      	cmp	r3, #96	; 0x60
 8002afa:	d050      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0x11a>
 8002afc:	2b60      	cmp	r3, #96	; 0x60
 8002afe:	d877      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b50      	cmp	r3, #80	; 0x50
 8002b02:	d03c      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xfa>
 8002b04:	2b50      	cmp	r3, #80	; 0x50
 8002b06:	d873      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b40      	cmp	r3, #64	; 0x40
 8002b0a:	d058      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x13a>
 8002b0c:	2b40      	cmp	r3, #64	; 0x40
 8002b0e:	d86f      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b30      	cmp	r3, #48	; 0x30
 8002b12:	d064      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b14:	2b30      	cmp	r3, #48	; 0x30
 8002b16:	d86b      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d060      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d867      	bhi.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05c      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b10      	cmp	r3, #16
 8002b26:	d05a      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x15a>
 8002b28:	e062      	b.n	8002bf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f000 f96a 	bl	8002e12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	609a      	str	r2, [r3, #8]
      break;
 8002b56:	e04f      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f000 f953 	bl	8002e12 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7a:	609a      	str	r2, [r3, #8]
      break;
 8002b7c:	e03c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f000 f8ca 	bl	8002d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2150      	movs	r1, #80	; 0x50
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f921 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002b9c:	e02c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 f8e8 	bl	8002d80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2160      	movs	r1, #96	; 0x60
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f911 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e01c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 f8aa 	bl	8002d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2140      	movs	r1, #64	; 0x40
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f901 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e00c      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f000 f8f8 	bl	8002dde <TIM_ITRx_SetConfig>
      break;
 8002bee:	e003      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e000      	b.n	8002bf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <TIM_Base_SetConfig+0xc0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x28>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x28>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <TIM_Base_SetConfig+0xc4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a20      	ldr	r2, [pc, #128]	; (8002d1c <TIM_Base_SetConfig+0xc0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x52>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x52>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <TIM_Base_SetConfig+0xc4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <TIM_Base_SetConfig+0xc0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d103      	bne.n	8002cf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]
  }
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0201 	bic.w	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 030a 	bic.w	r3, r3, #10
 8002d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	031b      	lsls	r3, r3, #12
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	621a      	str	r2, [r3, #32]
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b085      	sub	sp, #20
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f043 0307 	orr.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	609a      	str	r2, [r3, #8]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b087      	sub	sp, #28
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	609a      	str	r2, [r3, #8]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e041      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400

08002f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <__libc_init_array>:
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	2600      	movs	r6, #0
 8002f28:	4d0c      	ldr	r5, [pc, #48]	; (8002f5c <__libc_init_array+0x38>)
 8002f2a:	4c0d      	ldr	r4, [pc, #52]	; (8002f60 <__libc_init_array+0x3c>)
 8002f2c:	1b64      	subs	r4, r4, r5
 8002f2e:	10a4      	asrs	r4, r4, #2
 8002f30:	42a6      	cmp	r6, r4
 8002f32:	d109      	bne.n	8002f48 <__libc_init_array+0x24>
 8002f34:	f000 f822 	bl	8002f7c <_init>
 8002f38:	2600      	movs	r6, #0
 8002f3a:	4d0a      	ldr	r5, [pc, #40]	; (8002f64 <__libc_init_array+0x40>)
 8002f3c:	4c0a      	ldr	r4, [pc, #40]	; (8002f68 <__libc_init_array+0x44>)
 8002f3e:	1b64      	subs	r4, r4, r5
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	42a6      	cmp	r6, r4
 8002f44:	d105      	bne.n	8002f52 <__libc_init_array+0x2e>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4c:	4798      	blx	r3
 8002f4e:	3601      	adds	r6, #1
 8002f50:	e7ee      	b.n	8002f30 <__libc_init_array+0xc>
 8002f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f56:	4798      	blx	r3
 8002f58:	3601      	adds	r6, #1
 8002f5a:	e7f2      	b.n	8002f42 <__libc_init_array+0x1e>
 8002f5c:	08002fb8 	.word	0x08002fb8
 8002f60:	08002fb8 	.word	0x08002fb8
 8002f64:	08002fb8 	.word	0x08002fb8
 8002f68:	08002fbc 	.word	0x08002fbc

08002f6c <memset>:
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4402      	add	r2, r0
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d100      	bne.n	8002f76 <memset+0xa>
 8002f74:	4770      	bx	lr
 8002f76:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7a:	e7f9      	b.n	8002f70 <memset+0x4>

08002f7c <_init>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr

08002f88 <_fini>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr
